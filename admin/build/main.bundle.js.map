{"version":3,"file":"./admin/build/main.bundle.js","sources":["webpack:///./admin/src/fragment.tsx","webpack:///./admin/src/index.tsx","webpack:///./admin/src/settings.tsx","webpack:///./admin/src/tabs.tsx"],"sourcesContent":["export default function Fragment(props) {\r\n\treturn props.children;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./admin/src/fragment.tsx","// root objects\r\nimport * as $ from \"jquery\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\n// components\r\nimport Fragment from \"./fragment\";\r\nimport { OnSettingsChangedCallback, Settings } from \"./settings\";\r\nimport { Tabs } from \"./tabs\";\r\n\r\nconst $window = window as any;\r\nconst namespace = `tradfri.${$window.instance}`;\r\n\r\n// layout components\r\nfunction Header() {\r\n\treturn (\r\n\t\t<h3 className=\"translate\" data-role=\"adapter-name\">Tradfri adapter settings</h3>\r\n\t);\r\n}\r\n\r\nfunction Root(props) {\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<Header />\r\n\t\t\t<Settings settings={props.settings} onChange={props.onChange} />\r\n\t\t</Fragment>\r\n\t);\r\n}\r\n\r\nlet curSettings: any;\r\n\r\n// the function loadSettings has to exist ...\r\n$window.load = (settings, onChange) => {\r\n\r\n\tconst settingsChanged: OnSettingsChangedCallback = (newSettings, hasChanges: boolean) => {\r\n\t\tcurSettings = newSettings;\r\n\t\tonChange(hasChanges);\r\n\t\tconsole.log(`settings changed: ${JSON.stringify(curSettings)}, hasChanges=${hasChanges}`);\r\n\t};\r\n\r\n\tReactDOM.render(\r\n\t\t<Root settings={settings} onChange={settingsChanged} />,\r\n\t\tdocument.getElementById(\"adapter-container\"),\r\n\t);\r\n\r\n\t// Signal to admin, that no changes yet\r\n\tonChange(false);\r\n};\r\n\r\n// ... and the function save has to exist.\r\n// you have to make sure the callback is called with the settings object as first param!\r\n$window.save = (callback) => {\r\n\t// save the settings\r\n\tcallback(curSettings);\r\n};\r\n\r\nReactDOM.render(\r\n\t<Tabs tabs={{Test: <b>1</b>, Test2: <i>2</i>}} />,\r\n\tdocument.getElementById(\"adapter-container\"),\r\n);\r\n\n\n\n// WEBPACK FOOTER //\n// ./admin/src/index.tsx","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nconst $window = window as any;\r\n\r\nimport Fragment from \"./fragment\";\r\n\r\nexport type OnSettingsChangedCallback = (newSettings: DictionaryLike<any>, hasChanges: boolean) => void;\r\n\r\ninterface SettingsProps {\r\n\tonChange: OnSettingsChangedCallback;\r\n\tsettings: DictionaryLike<any>;\r\n}\r\n\r\ninterface DictionaryLike<T> {\r\n\t[key: string]: T;\r\n}\r\n\r\n/** Helper component for a settings label */\r\nfunction Label(props) {\r\n\treturn <label htmlFor={props.for} className={[\"translate\"].concat(...(props.class || [])).join(\" \")}>{props.text} </label>;\r\n}\r\n/** Helper component for a tooltip */\r\nfunction Tooltip(props) {\r\n\treturn <img className=\"admin-tooltip-icon\" src=\"../../img/info.png\" title={props.text} />;\r\n}\r\n\r\nexport class Settings extends React.Component<SettingsProps, DictionaryLike<any>> {\r\n\r\n\tconstructor(props: SettingsProps) {\r\n\t\tsuper(props);\r\n\t\t// settings are our state\r\n\t\tthis.state = {\r\n\t\t\t...props.settings,\r\n\t\t};\r\n\t\t// remember the original settings\r\n\t\tthis.originalSettings = {...props.settings};\r\n\r\n\t\t// setup change handlers\r\n\t\tthis.handleChange = this.handleChange.bind(this);\r\n\t}\r\n\r\n\tprivate onChange: OnSettingsChangedCallback;\r\n\tprivate originalSettings: DictionaryLike<any>;\r\n\r\n\t// gets called when the form elements are changed by the user\r\n\tprivate handleChange(event: React.FormEvent<HTMLElement>) {\r\n\t\tconst target = event.target as (HTMLInputElement | HTMLSelectElement); // TODO: more types\r\n\r\n\t\t// store the setting\r\n\t\tthis.putSetting(target.id, target.value, () => {\r\n\t\t\t// and notify the admin UI about changes\r\n\t\t\tthis.props.onChange(this.state, this.hasChanges());\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Reads a setting from the state object and transforms the value into the correct format\r\n\t * @param key The setting key to lookup\r\n\t */\r\n\tprivate getSetting(key: string): string | number | string[] {\r\n\t\treturn this.state[key] as any;\r\n\t}\r\n\t/**\r\n\t * Saves a setting in the state object and transforms the value into the correct format\r\n\t * @param key The setting key to store at\r\n\t */\r\n\tprivate putSetting(key: string, value: string | number | string[], callback?: () => void): void {\r\n\t\tthis.setState({[key]: value as any}, callback);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if any setting was changed\r\n\t */\r\n\tprivate hasChanges(): boolean {\r\n\t\tfor (const key of Object.keys(this.originalSettings)) {\r\n\t\t\tif (this.originalSettings[key] !== this.state[key]) return true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic onSave(): any {\r\n\t\treturn this.state;\r\n\t}\r\n\r\n\tpublic render() {\r\n\t\treturn (\r\n\t\t\t<Fragment>\r\n\t\t\t\t<h4 key=\"header\" className=\"translate\">Settings</h4>\r\n\t\t\t\t<p key=\"content\" className=\"settings-table\">\r\n\t\t\t\t\t<Label for=\"host\" text=\"Gateway IP/Hostname:\" />\r\n\t\t\t\t\t<Tooltip text=\"Der Hostname ist &quot;gw-&quot; gefolgt von der MAC-Adresse bzw. Seriennummer des Gateways, ohne Sonderzeichen, z.B. gw-a0b1c2d3e4f5. Er findet sich auf der Unterseite des Gateways\" />\r\n\t\t\t\t\t<input className=\"value\" id=\"host\" value={this.getSetting(\"host\")} onChange={this.handleChange} /><br />\r\n\r\n\t\t\t\t\t<Label for=\"securityCode\" text=\"Security-Code:\" />\r\n\t\t\t\t\t<Tooltip text=\"Der Security-Code findet sich auf der Unterseite des Gateways\" />\r\n\t\t\t\t\t<input className=\"value\" id=\"securityCode\" value={this.getSetting(\"securityCode\")} onChange={this.handleChange}  />\r\n\t\t\t\t</p>\r\n\t\t\t</Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./admin/src/settings.tsx","// Renders some components in jQuery UI tabs\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\n// fix missing property errors/warnings\r\nconst $window = window as any;\r\nconst $ = $window.jQuery as JQuery;\r\nconst $$ = $ as any;\r\n\r\nexport class Tabs extends React.Component<any, any> {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\ttabs: props.tabs,\r\n\t\t};\r\n\t\tthis.containerId = this.props.id || \"tabs\";\r\n\t}\r\n\r\n\tprivate containerId: string;\r\n\r\n\tpublic componentDidMount() {\r\n\t\tif (!$) return; // we're in a test environment without jQuery\r\n\r\n\t\t$$(`#${this.containerId}`).tabs();\r\n\t}\r\n\r\n\tpublic render() {\r\n\t\treturn (\r\n\t\t\t<div id={this.containerId}>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t{Object.keys(this.state.tabs).map(\r\n\t\t\t\t\t\t(k, i) => <li key={i}><a href={`#${this.containerId}-${i}`}>{k}</a></li>,\r\n\t\t\t\t\t)}\r\n\t\t\t\t</ul>\r\n\t\t\t\t{Object.keys(this.state.tabs).map(\r\n\t\t\t\t\t(k, i) => <div key={i} id={`#${this.containerId}-${i}`}>{this.state.tabs[k]}</div>,\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./admin/src/tabs.tsx"],"mappings":";;;;;;;;AAAA;AACA;AACA;AAFA;;;;;;;;;;;ACEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AAGA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;ACxDA;AAGA;AAEA;AAaA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAIA;AACA;AA1EA;;;;;;;;;;;AC3BA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;AAKA;AACA;AAhCA;;;;;A","sourceRoot":""}