{"version":3,"file":"./admin/build/main.bundle.js","sources":["webpack:///./admin/src/components/editable-label.tsx","webpack:///./admin/src/components/multi-dropdown.tsx","webpack:///./admin/src/components/tabs.tsx","webpack:///./admin/src/index.tsx","webpack:///./admin/src/lib/adapter.ts","webpack:///./admin/src/pages/groups.tsx","webpack:///./admin/src/pages/settings.tsx","webpack:///external \"jQuery\""],"sourcesContent":["import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nimport { $window, _, instance} from \"../lib/adapter\";\r\n\r\ninterface EditableLabelState {\r\n\teditMode: boolean;\r\n\ttext: string;\r\n}\r\ninterface EditableLabelProps {\r\n\ttext: string;\r\n\tmaxLength?: number;\r\n\ttextChanged: (newText: string) => void;\r\n}\r\n\r\nexport class EditableLabel extends React.Component<EditableLabelProps, EditableLabelState> {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\teditMode: false,\r\n\t\t\ttext: props.text,\r\n\t\t};\r\n\t}\r\n\r\n\tprivate txtEdit: HTMLInputElement;\r\n\r\n\tprivate readonly beginEdit = () => {\r\n\t\tthis.setState({editMode: true});\r\n\t\tthis.selectPending = true;\r\n\t}\r\n\tprivate readonly onEdit = () => {\r\n\t\tthis.setState({\r\n\t\t\ttext: this.txtEdit.value,\r\n\t\t});\r\n\t}\r\n\tprivate readonly endEdit = (save: boolean = true) => {\r\n\t\tthis.setState({\r\n\t\t\teditMode: false,\r\n\t\t});\r\n\t\tthis.selectPending = false;\r\n\t\tif (save) {\r\n\t\t\tthis.props.textChanged(this.state.text);\r\n\t\t} else {\r\n\t\t\tthis.setState({text: this.props.text});\r\n\t\t}\r\n\t}\r\n\r\n\tprivate readonly keyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n\t\tif (e.keyCode === 13 /* Enter */) {\r\n\t\t\tthis.endEdit();\r\n\t\t} else if (e.keyCode === 27 /* Escape */) {\r\n\t\t\tthis.endEdit(false);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate selectPending: boolean = false;\r\n\r\n\tpublic render() {\r\n\t\tif (this.state.editMode) {\r\n\t\t\treturn (\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tref={(me) => {\r\n\t\t\t\t\t\tthis.txtEdit = me;\r\n\t\t\t\t\t\tif (this.txtEdit != null && this.selectPending) {\r\n\t\t\t\t\t\t\tthis.txtEdit.select();\r\n\t\t\t\t\t\t\tthis.selectPending = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tonBlur={() => this.endEdit()}\r\n\t\t\t\t\tonKeyDown={this.keyDown}\r\n\t\t\t\t\tonChange={this.onEdit}\r\n\t\t\t\t\tvalue={this.state.text}\r\n\t\t\t\t\tmaxLength={this.props.maxLength || 200}\r\n\t\t\t\t\tautoFocus\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t\t<span onClick={this.beginEdit}>{this.state.text}</span>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./admin/src/components/editable-label.tsx","// Renders some components in jQuery UI tabs\r\nimport * as $ from \"jquery\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nimport { $window, _, instance} from \"../lib/adapter\";\r\n\r\n// tslint:disable-next-line:variable-name\r\nconst M_Select = (M.FormSelect || (M as any).Select as typeof M.FormSelect);\r\n\r\ninterface MultiDropdownProps {\r\n\toptions: {[key: string]: string};\r\n\tcheckedOptions: string[];\r\n\tcheckedChanged: (selected: string[]) => void;\r\n}\r\n\r\ninterface MultiDropdownState {\r\n\tcheckedOptions: string[];\r\n}\r\n\r\nexport class MultiDropdown extends React.Component<MultiDropdownProps, MultiDropdownState> {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tcheckedOptions: props.checkedOptions,\r\n\t\t};\r\n\r\n\t\tthis.readStateFromUI = this.readStateFromUI.bind(this);\r\n\t}\r\n\r\n\tprivate dropdown: HTMLSelectElement;\r\n\tprivate mcssSelect: M.FormSelect;\r\n\r\n\tpublic componentDidMount() {\r\n\t\tthis.updateUI();\r\n\r\n\t\tif (this.dropdown != null) {\r\n\t\t\t$(this.dropdown).on(\"change\", this.readStateFromUI as any);\r\n\r\n\t\t\tthis.mcssSelect = M_Select.init(this.dropdown);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic componentWillUnmount() {\r\n\t\tif (this.dropdown != null) {\r\n\t\t\t$(this.dropdown).off(\"change\", this.readStateFromUI as any);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic componentDidUpdate() {\r\n\t\tthis.updateUI();\r\n\t}\r\n\r\n\tprivate updateUI() {\r\n\t\tconst $dropdown = $(this.dropdown);\r\n\t\t$dropdown.find(\"option:selected\").prop(\"selected\", false);\r\n\t\tthis.state.checkedOptions.forEach(val => {\r\n\t\t\t$dropdown.find(`option[value=${val}]`).prop(\"selected\", true);\r\n\t\t});\r\n\t}\r\n\r\n\tprivate readStateFromUI() {\r\n\t\t// read data from UI\r\n\t\tthis.setState({checkedOptions: this.mcssSelect.getSelectedValues()}, () => {\r\n\t\t\t// update the adapter settings\r\n\t\t\tthis.props.checkedChanged(this.state.checkedOptions);\r\n\t\t});\r\n\t}\r\n\r\n\tpublic render() {\r\n\t\treturn (\r\n\t\t\t<select\r\n\t\t\t\tmultiple={true}\r\n\t\t\t\tref={(me) => this.dropdown = me}\r\n\t\t\t\tdefaultValue={[\"\"]}\r\n\t\t\t>\r\n\t\t\t<option value=\"\" disabled>{_(\"select devices\")}</option>\r\n\t\t\t{Object.keys(this.props.options).map(k => (\r\n\t\t\t\t<option key={k} value={k}>\r\n\t\t\t\t\t{this.props.options[k]}\r\n\t\t\t\t</option>\r\n\t\t\t))}\r\n\t\t\t</select>\r\n\t\t);\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./admin/src/components/multi-dropdown.tsx","// Renders some components in jQuery UI tabs\r\nimport * as $ from \"jquery\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nimport { $window, _, instance } from \"../lib/adapter\";\r\n\r\nexport class Tabs extends React.Component<any, any> {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.containerId = this.props.id || \"tabs\";\r\n\t}\r\n\r\n\tprivate containerId: string;\r\n\r\n\tpublic render() {\r\n\t\treturn (\r\n\t\t\t<div className=\"row\" id={this.containerId}>\r\n\t\t\t\t<div className=\"tabs-header col s12\">\r\n\t\t\t\t\t<ul className=\"tabs\">\r\n\t\t\t\t\t\t{this.props.labels.map(\r\n\t\t\t\t\t\t\t(k, i) => <li className=\"tab col s3\" key={i}><a href={`#${this.containerId}-${i}`}>{_(k)}</a></li>,\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t\t{this.props.labels.map(\r\n\t\t\t\t\t(k, i) => <div className=\"col s12\" key={i} id={`${this.containerId}-${i}`}>{this.props.children[i]}</div>,\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./admin/src/components/tabs.tsx","// root objects\r\nimport * as $ from \"jquery\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nimport { $window, _, instance, sendTo, socket} from \"./lib/adapter\";\r\n\r\n// components\r\nimport { Tabs } from \"./components/tabs\";\r\nimport { DeviceDictionary, GroupDictionary, Groups } from \"./pages/groups\";\r\nimport { OnSettingsChangedCallback, Settings } from \"./pages/settings\";\r\n\r\nconst namespace = `tradfri.${instance}`;\r\n\r\n// layout components\r\nfunction Header() {\r\n\treturn (\r\n\t\t<h3 className=\"translate\" data-role=\"adapter-name\">{_(\"Tradfri adapter settings\")}</h3>\r\n\t);\r\n}\r\n\r\n// TODO: Remove `any`\r\nexport class Root extends React.Component<any, any> {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tgroups: {},\r\n\t\t\tdevices: {},\r\n\t\t};\r\n\t}\r\n\r\n\tpublic componentDidMount() {\r\n\t\t// subscribe to changes of virtual group objects\r\n\t\tsocket.emit(\"subscribeObjects\", namespace + \".VG-*\");\r\n\t\tsocket.on(\"objectChange\", (id: string, obj) => {\r\n\t\t\tif (id.substring(0, namespace.length) !== namespace) return;\r\n\t\t\tif (id.match(/VG\\-\\d+$/)) {\r\n\t\t\t\tthis.updateGroups();\r\n\t\t\t} else if (!obj || obj.common.type === \"device\") {\r\n\t\t\t\tthis.updateDevices();\r\n\t\t\t}\r\n\t\t});\r\n\t\t// and update once on start\r\n\t\tthis.updateGroups();\r\n\t\tthis.updateDevices();\r\n\t}\r\n\r\n\tpublic updateGroups() {\r\n\t\tsendTo(null, \"getGroups\", { type: \"virtual\" }, (result) => {\r\n\t\t\tif (result && result.error) {\r\n\t\t\t\tconsole.error(result.error);\r\n\t\t\t} else {\r\n\t\t\t\tthis.setState({groups: result.result as GroupDictionary});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tpublic updateDevices() {\r\n\t\tsendTo(null, \"getDevices\", { type: \"lightbulb\" }, (result) => {\r\n\t\t\tif (result && result.error) {\r\n\t\t\t\tconsole.error(result.error);\r\n\t\t\t} else {\r\n\t\t\t\tthis.setState({devices: result.result as DeviceDictionary});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tpublic render() {\r\n\t\treturn (\r\n\t\t\t// <>\r\n\t\t\t// \t<Header />\r\n\t\t\t\t<Tabs labels={[\"Settings\", \"Groups\"]}>\r\n\t\t\t\t\t<Settings settings={this.props.settings} onChange={this.props.onSettingsChanged} />\r\n\t\t\t\t\t<Groups groups={this.state.groups} devices={this.state.devices} />\r\n\t\t\t\t</Tabs>\r\n\t\t\t// </>\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\nlet curSettings: ioBroker.AdapterConfig;\r\nlet originalSettings: ioBroker.AdapterConfig;\r\n\r\n/**\r\n * Checks if any setting was changed\r\n */\r\nfunction hasChanges(): boolean {\r\n\tif (Object.keys(originalSettings).length !== Object.keys(curSettings).length) return true;\r\n\tfor (const key of Object.keys(originalSettings)) {\r\n\t\tif (originalSettings[key] !== curSettings[key]) return true;\r\n\t}\r\n\treturn false;\r\n}\r\n\r\n// the function loadSettings has to exist ...\r\n$window.load = (settings, onChange) => {\r\n\r\n\toriginalSettings = settings;\r\n\r\n\tconst settingsChanged: OnSettingsChangedCallback = (newSettings) => {\r\n\t\tcurSettings = newSettings;\r\n\t\tonChange(hasChanges());\r\n\t};\r\n\r\n\tReactDOM.render(\r\n\t\t<Root settings={settings} onSettingsChanged={settingsChanged} />,\r\n\t\tdocument.getElementById(\"adapter-container\") || document.getElementsByClassName(\"adapter-container\")[0],\r\n\t);\r\n\r\n\t// Signal to admin, that no changes yet\r\n\tonChange(false);\r\n};\r\n\r\n// ... and the function save has to exist.\r\n// you have to make sure the callback is called with the settings object as first param!\r\n$window.save = (callback) => {\r\n\t// save the settings\r\n\tcallback(curSettings);\r\n\toriginalSettings = curSettings;\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./admin/src/index.tsx","// fix missing property errors/warnings\r\ninterface SendToResult {\r\n\terror?: string | Error;\r\n\tresult?: any;\r\n}\r\nexport const $window = window as any as {\r\n\tload: (settings: ioBroker.AdapterConfig, onChange: (hasChanges: boolean) => void) => void;\r\n\tsave: (callback: (settings: ioBroker.AdapterConfig) => void) => void;\r\n\treadonly instance: number;\r\n\t/** Translates text */\r\n\t_: (text: string) => string;\r\n\tjQuery: JQueryStatic;\r\n\t$: JQueryStatic;\r\n\tsocket: any;\r\n\tsendTo: (instance: any | null, command: string, message: any, callback: (result: SendToResult) => void) => void;\r\n};\r\n// export interface JQueryUI {\r\n// \ttabs: (selector?: any) => JQuery & JQueryUI;\r\n// \tbutton: (selector?: any) => JQuery & JQueryUI;\r\n// \tmultiselect: (selector?: any) => JQuery & JQueryUI;\r\n// }\r\n// export const $$ = $window.jQuery as any as (...args: any[]) => JQuery /* & JQueryUI */;\r\nexport const instance = $window.instance || 0;\r\nexport const _ = $window._ || ((text: string) => text);\r\nexport const socket = $window.socket;\r\nexport const sendTo = $window.sendTo;\r\n\n\n\n// WEBPACK FOOTER //\n// ./admin/src/lib/adapter.ts","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nimport { $window, _, instance, sendTo, socket} from \"../lib/adapter\";\r\n\r\nimport { EditableLabel } from \"../components/editable-label\";\r\nimport { MultiDropdown } from \"../components/multi-dropdown\";\r\n\r\n// Load communication objects as defined in the message module\r\nimport { Device, Group } from \"../../../src/modules/communication\";\r\n\r\nexport interface GroupDictionary {\r\n\t[id: string]: Group;\r\n}\r\nexport interface DeviceDictionary {\r\n\t[id: string]: Device;\r\n}\r\ninterface GroupsProps {\r\n\tgroups: GroupDictionary;\r\n\tdevices: DeviceDictionary;\r\n}\r\n\r\nconst ADD_GROUP_BUTTON_ID = \"btnAddGroup\";\r\n\r\nexport class Groups extends React.Component<GroupsProps, any> {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t}\r\n\r\n\tprivate addGroup() {\r\n\t\tsendTo(null, \"addVirtualGroup\", null, (result) => {\r\n\t\t\tif (result && result.error) {\r\n\t\t\t\tconsole.error(result.error);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tprivate deleteGroup(id: string) {\r\n\t\tsendTo(null, \"deleteVirtualGroup\", {id}, (result) => {\r\n\t\t\tif (result && result.error) {\r\n\t\t\t\tconsole.error(result.error);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tprivate renameGroup(id: string, newName: string) {\r\n\t\tconst group = this.props.groups[id];\r\n\t\t// if we have a valid name\r\n\t\tif (typeof newName === \"string\" && newName.length > 0 && newName !== group.name) {\r\n\t\t\t// update it on the server\r\n\t\t\tsendTo(null, \"editVirtualGroup\", {id, name: newName}, (result) => {\r\n\t\t\t\tif (result && result.error) {\r\n\t\t\t\t\tconsole.error(result.error);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tprivate changeGroupDevices(id: string, deviceIDs: string[]) {\r\n\t\t// update it on the server\r\n\t\tsendTo(null, \"editVirtualGroup\", {id, deviceIDs}, (result) => {\r\n\t\t\tif (result && result.error) {\r\n\t\t\t\tconsole.error(result.error);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tprivate devicesToDropdownSource(devices: DeviceDictionary) {\r\n\t\tconst ret = {};\r\n\t\tfor (const key of Object.keys(devices)) {\r\n\t\t\tret[key] = devices[key].name;\r\n\t\t}\r\n\t\treturn ret;\r\n\t}\r\n\r\n\tpublic render() {\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<p className=\"actions-panel\">\r\n\t\t\t\t\t<button id={ADD_GROUP_BUTTON_ID} onClick={this.addGroup} className=\"btn\">\r\n\t\t\t\t\t\t<i className=\"material-icons left\">library_add</i>{_(\"add group\")}\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</p>\r\n\t\t\t\t<table id=\"virtual-groups\">\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<td className=\"id\">{_(\"ID\")}</td>\r\n\t\t\t\t\t\t\t<td className=\"name\">{_(\"Name\")}</td>\r\n\t\t\t\t\t\t\t<td className=\"devices\">{_(\"Devices\")}</td>\r\n\t\t\t\t\t\t\t<td className=\"delete\"></td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{(this.props.groups && Object.keys(this.props.groups).length > 0 ? (\r\n\t\t\t\t\t\t\tObject.keys(this.props.groups)\r\n\t\t\t\t\t\t\t.map(k => this.props.groups[k])\r\n\t\t\t\t\t\t\t.map(group => (\r\n\t\t\t\t\t\t\t<tr key={group.id}>\r\n\t\t\t\t\t\t\t\t<td>{group.id}</td>\r\n\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t<EditableLabel\r\n\t\t\t\t\t\t\t\t\t\ttext={group.name}\r\n\t\t\t\t\t\t\t\t\t\tmaxLength={100}\r\n\t\t\t\t\t\t\t\t\t\ttextChanged={(newText: string) => this.renameGroup(group.id, newText)}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t<td>{\r\n\t\t\t\t\t\t\t\t\t(this.props.devices && Object.keys(this.props.devices).length > 0) ? (\r\n\t\t\t\t\t\t\t\t\t\t<MultiDropdown\r\n\t\t\t\t\t\t\t\t\t\t\toptions={this.devicesToDropdownSource(this.props.devices)}\r\n\t\t\t\t\t\t\t\t\t\t\tcheckedOptions={(group.deviceIDs || []).map(id => `${id}`)}\r\n\t\t\t\t\t\t\t\t\t\t\tcheckedChanged={(checked) => this.changeGroupDevices(group.id, checked)}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t) : _(\"no devices\")\r\n\t\t\t\t\t\t\t\t}</td>\r\n\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t<button title={_(\"delete group\")} className=\"btn-small red\" onClick={() => this.deleteGroup(group.id)}>\r\n\t\t\t\t\t\t\t\t\t\t<i className=\"material-icons\">delete</i>\r\n\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td className=\"empty\" colSpan={4}>{_(\"No virtual groups defined\")}</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t\t<p>{_(\"changes are live\")}</p>\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./admin/src/pages/groups.tsx","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nimport { $window, _, instance } from \"../lib/adapter\";\r\n\r\nexport type OnSettingsChangedCallback = (newSettings: ioBroker.AdapterConfig) => void;\r\n\r\ninterface SettingsProps {\r\n\tonChange: OnSettingsChangedCallback;\r\n\tsettings: ioBroker.AdapterConfig;\r\n}\r\n\r\ninterface LabelProps {\r\n\tfor: string;\r\n\ttext: string;\r\n\tclass?: string[];\r\n\ttooltip?: string;\r\n}\r\n\r\n/** Helper component for a settings label */\r\nfunction Label(props: LabelProps) {\r\n\tconst classNames =\r\n\t\t(props.class as string[] || [])\r\n\t\t;\r\n\treturn (\r\n\t\t<label htmlFor={props.for} className={classNames.join(\" \")}>\r\n\t\t\t{_(props.text)}\r\n\t\t\t{props.tooltip != null && <Tooltip text={props.tooltip} />}\r\n\t\t</label>\r\n\t);\r\n}\r\n\r\ninterface CheckboxLabelProps {\r\n\ttext: string;\r\n\tclass?: string[];\r\n\ttooltip?: string;\r\n}\r\n\r\n/** Inner label for a Materializes CSS checkbox (span, no for property) */\r\nfunction CheckboxLabel(props: CheckboxLabelProps) {\r\n\tconst classNames =\r\n\t\t(props.class as string[] || [])\r\n\t\t;\r\n\treturn (\r\n\t\t<span className={classNames.join(\" \")}>\r\n\t\t\t{_(props.text)}\r\n\t\t\t{props.tooltip != null && <Tooltip text={props.tooltip} />}\r\n\t\t</span>\r\n\t);\r\n}\r\n\r\n/** Helper component for a tooltip */\r\nfunction Tooltip(props) {\r\n\treturn <img className=\"admin-tooltip-icon\" src=\"../../img/info.png\" title={_(props.text)} />;\r\n}\r\n\r\nexport class Settings extends React.Component<SettingsProps, ioBroker.AdapterConfig> {\r\n\r\n\tconstructor(props: SettingsProps) {\r\n\t\tsuper(props);\r\n\t\t// settings are our state\r\n\t\tthis.state = {\r\n\t\t\t...props.settings,\r\n\t\t};\r\n\r\n\t\t// setup change handlers\r\n\t\tthis.handleChange = this.handleChange.bind(this);\r\n\t}\r\n\r\n\tprivate chkPreserveTransitionTime: HTMLInputElement;\r\n\r\n\tprivate parseChangedSetting(target: HTMLInputElement | HTMLSelectElement): ioBroker.AdapterConfig[keyof ioBroker.AdapterConfig] {\r\n\t\t// Checkboxes in MaterializeCSS are messed up, so we attach our own handler\r\n\t\t// However that one gets called before the underlying checkbox is actually updated,\r\n\t\t// so we need to invert the checked value here\r\n\t\treturn target.type === \"checkbox\" ? !(target as any).checked\r\n\t\t\t: target.type === \"number\" ? parseInt(target.value, 10)\r\n\t\t\t: target.value\r\n\t\t;\r\n\t}\r\n\r\n\t// gets called when the form elements are changed by the user\r\n\tprivate handleChange(event: React.FormEvent<HTMLElement>) {\r\n\t\tconst target = event.target as (HTMLInputElement | HTMLSelectElement); // TODO: more types\r\n\t\tconst value = this.parseChangedSetting(target);\r\n\r\n\t\t// store the setting\r\n\t\tthis.putSetting(target.id as keyof ioBroker.AdapterConfig, value, () => {\r\n\t\t\t// and notify the admin UI about changes\r\n\t\t\tthis.props.onChange(this.state);\r\n\t\t});\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Reads a setting from the state object and transforms the value into the correct format\r\n\t * @param key The setting key to lookup\r\n\t */\r\n\tprivate getSetting<\r\n\t\tTKey extends keyof ioBroker.AdapterConfig,\r\n\t\tTSetting extends ioBroker.AdapterConfig[TKey] = ioBroker.AdapterConfig[TKey],\r\n\t>(key: TKey, defaultValue?: TSetting): TSetting {\r\n\t\tconst ret = this.state[key] as TSetting;\r\n\t\treturn ret != undefined ? ret : defaultValue;\r\n\t}\r\n\t/**\r\n\t * Saves a setting in the state object and transforms the value into the correct format\r\n\t * @param key The setting key to store at\r\n\t */\r\n\tprivate putSetting<\r\n\t\tTKey extends keyof ioBroker.AdapterConfig,\r\n\t\tTSetting extends ioBroker.AdapterConfig[TKey],\r\n\t>(key: TKey, value: TSetting, callback?: () => void): void {\r\n\t\tthis.setState({ [key]: value } as unknown as Pick<ioBroker.AdapterConfig, TKey>, callback);\r\n\t}\r\n\r\n\tpublic componentWillUnmount() {\r\n\t\tif (this.chkPreserveTransitionTime != null) {\r\n\t\t\t$(this.chkPreserveTransitionTime).off(\"click\", this.handleChange as any);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic componentDidMount() {\r\n\t\t// update floating labels in materialize design\r\n\t\tM.updateTextFields();\r\n\t\t// Fix materialize checkboxes\r\n\t\tif (this.chkPreserveTransitionTime != null) {\r\n\t\t\t$(this.chkPreserveTransitionTime).on(\"click\", this.handleChange as any);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic render() {\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<div className=\"col s4 input-field\">\r\n\t\t\t\t\t\t<input type=\"text\" className=\"value\" id=\"host\" value={this.getSetting(\"host\")} onChange={this.handleChange} />\r\n\t\t\t\t\t\t<Label for=\"host\" text=\"Gateway IP/Hostname:\" tooltip=\"hostname tooltip\" />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"col s4 input-field\">\r\n\t\t\t\t\t\t<input type=\"text\" className=\"value\" id=\"securityCode\" value={this.getSetting(\"securityCode\")} onChange={this.handleChange} />\r\n\t\t\t\t\t\t<Label for=\"securityCode\" text=\"Security-Code:\" tooltip=\"security code tooltip\" />\r\n\t\t\t\t\t\t<span>{_(\"code not stored\")}</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<div className=\"col s4\">\r\n\t\t\t\t\t\t<label htmlFor=\"preserveTransitionTime\">\r\n\t\t\t\t\t\t\t<input type=\"checkbox\" className=\"value\" id=\"preserveTransitionTime\" defaultChecked={this.getSetting(\"preserveTransitionTime\")}\r\n\t\t\t\t\t\t\t\tref={me => this.chkPreserveTransitionTime = me}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<CheckboxLabel text=\"Preserve transition time\" tooltip=\"transition time tooltip\" />\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"col s4 input-field\">\r\n\t\t\t\t\t\t<input type=\"number\" min=\"0\" max=\"2\" className=\"value\" id=\"roundToDigits\" value={this.getSetting(\"roundToDigits\") || 2} onChange={this.handleChange} />\r\n\t\t\t\t\t\t<Label for=\"roundToDigits\" text=\"Decimal places:\" tooltip=\"roundto tooltip\" />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./admin/src/pages/settings.tsx","module.exports = jQuery;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"jQuery\"\n// module id = jquery\n// module chunks = main"],"mappings":";;;;;;;;AAAA;AAeA;AAEA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AArCA;AACA;AACA;AACA;AACA;AAmCA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AASA;AAAA;AACA;AAGA;AACA;AAEA;AAtEA;;;;;;;;;;;ACfA;AACA;AACA;AAGA;AAEA;AACA;AAYA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AAOA;AACA;AAlEA;;;;;;;;;;;AClBA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AAIA;AAKA;AACA;AAzBA;;;;;;;;;;;ACLA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AA1DA;AA4DA;AACA;AAEA;;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACpHA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACzBA;AAGA;AAEA;AACA;AAgBA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAEA;AACA;AACA;AAMA;AASA;AACA;AACA;AAOA;AAKA;AAGA;AAEA;AA/GA;;;;;;;;;;;ACxBA;AAGA;AAgBA;AACA;AACA;AAGA;AAEA;AACA;AAGA;AAQA;AACA;AACA;AAGA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;AAGA;AACA;AAIA;AACA;AACA;AACA;;;AAGA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAKA;AAEA;AA5GA;;;;;;;;ACxDA;;;;A","sourceRoot":""}