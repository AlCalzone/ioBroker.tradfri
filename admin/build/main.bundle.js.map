{"version":3,"file":"./admin/build/main.bundle.js","sources":["webpack:///./admin/src/components/fragment.tsx","webpack:///./admin/src/components/tabs.tsx","webpack:///./admin/src/index.tsx","webpack:///./admin/src/lib/adapter.ts","webpack:///./admin/src/pages/groups.tsx","webpack:///./admin/src/pages/settings.tsx"],"sourcesContent":["export default function Fragment(props) {\r\n\treturn props.children;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./admin/src/components/fragment.tsx","// Renders some components in jQuery UI tabs\r\nimport * as $ from \"jquery\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nimport {$$, $window, _, instance} from \"../lib/adapter\";\r\n\r\nexport class Tabs extends React.Component<any, any> {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\t// this.state = {\r\n\t\t// \ttabs: props.tabs,\r\n\t\t// };\r\n\t\tthis.containerId = this.props.id || \"tabs\";\r\n\t}\r\n\r\n\tprivate containerId: string;\r\n\r\n\tpublic componentDidMount() {\r\n\t\tif (!$$) return; // we're in a test environment without jQuery\r\n\r\n\t\t$$(`#${this.containerId}`).tabs();\r\n\t}\r\n\r\n\tpublic render() {\r\n\t\tconsole.log(\"Tabs rendering\");\r\n\t\treturn (\r\n\t\t\t<div id={this.containerId}>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t{this.props.labels.map(\r\n\t\t\t\t\t\t(k, i) => <li key={i}><a href={`#${this.containerId}-${i}`}>{_(k)}</a></li>,\r\n\t\t\t\t\t)}\r\n\t\t\t\t</ul>\r\n\t\t\t\t{this.props.labels.map(\r\n\t\t\t\t\t(k, i) => <div key={i} id={`${this.containerId}-${i}`}>{this.props.children[i]}</div>,\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./admin/src/components/tabs.tsx","// root objects\r\nimport * as $ from \"jquery\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nimport {$$, $window, _, instance, sendTo, socket} from \"./lib/adapter\";\r\n\r\n// components\r\nimport Fragment from \"./components/fragment\";\r\nimport { Tabs } from \"./components/tabs\";\r\nimport { GroupDictionary, Groups } from \"./pages/groups\";\r\nimport { OnSettingsChangedCallback, Settings } from \"./pages/settings\";\r\n\r\nconst namespace = `tradfri.${instance}`;\r\n\r\n// layout components\r\nfunction Header() {\r\n\treturn (\r\n\t\t<h3 className=\"translate\" data-role=\"adapter-name\">{_(\"Tradfri adapter settings\")}</h3>\r\n\t);\r\n}\r\n\r\nexport class Root extends React.Component<any, any> {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tgroups: {},\r\n\t\t};\r\n\t}\r\n\r\n\tpublic componentDidMount() {\r\n\t\t// subscribe to changes of virtual group objects\r\n\t\tsocket.emit(\"subscribeObjects\", namespace + \".VG-*\");\r\n\t\tsocket.on(\"objectChange\", (id: string, obj) => {\r\n\t\t\tif (id.substring(0, namespace.length) !== namespace) return;\r\n\t\t\tif (id.match(/VG\\-\\d+$/)) this.updateGroups();\r\n\t\t});\r\n\t\t// and update once on start\r\n\t\tthis.updateGroups();\r\n\t}\r\n\r\n\tpublic get groups(): GroupDictionary {\r\n\t\treturn this.state.groups;\r\n\t}\r\n\tpublic set groups(value: GroupDictionary) {\r\n\t\tthis.setState({groups: value});\r\n\t}\r\n\r\n\tpublic updateGroups() {\r\n\t\tsendTo(null, \"getGroups\", { type: \"virtual\" }, (result) => {\r\n\t\t\tif (result && result.error) {\r\n\t\t\t\tconsole.error(result.error);\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log(\"updated groups\");\r\n\t\t\t\tthis.groups = result.result as GroupDictionary;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tpublic render() {\r\n\t\tconsole.log(\"Root rendering\");\r\n\t\treturn (\r\n\t\t\t<Fragment>\r\n\t\t\t\t<Header />\r\n\t\t\t\t<Tabs labels={[\"Settings\", \"Groups\"]}>\r\n\t\t\t\t\t<Settings settings={this.props.settings} onChange={this.props.onSettingsChanged} />\r\n\t\t\t\t\t<Groups groups={this.state.groups} />\r\n\t\t\t\t</Tabs>\r\n\t\t\t</Fragment>\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\nlet curSettings: any;\r\n\r\n// the function loadSettings has to exist ...\r\n$window.load = (settings, onChange) => {\r\n\r\n\tconst settingsChanged: OnSettingsChangedCallback = (newSettings, hasChanges: boolean) => {\r\n\t\tcurSettings = newSettings;\r\n\t\tonChange(hasChanges);\r\n\t\tconsole.log(`settings changed: ${JSON.stringify(curSettings)}, hasChanges=${hasChanges}`);\r\n\t};\r\n\r\n\tReactDOM.render(\r\n\t\t<Root settings={settings} onSettingsChanged={settingsChanged} />,\r\n\t\tdocument.getElementById(\"adapter-container\"),\r\n\t);\r\n\r\n\t// Signal to admin, that no changes yet\r\n\tonChange(false);\r\n};\r\n\r\n// ... and the function save has to exist.\r\n// you have to make sure the callback is called with the settings object as first param!\r\n$window.save = (callback) => {\r\n\t// save the settings\r\n\tcallback(curSettings);\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./admin/src/index.tsx","// fix missing property errors/warnings\r\ninterface SendToResult {\r\n\terror?: string | Error;\r\n\tresult?: any;\r\n}\r\nexport const $window = window as any as {\r\n\tload: (settings, onChange) => void;\r\n\tsave: (callback: (settings) => void) => void;\r\n\treadonly instance: number;\r\n\t/** Translates text */\r\n\t_: (text: string) => string;\r\n\tjQuery: JQueryStatic;\r\n\tsocket: any;\r\n\tsendTo: (instance: any | null, command: string, message: any, callback: (result: SendToResult) => void) => void;\r\n};\r\nexport interface JQueryWithTabs {\r\n\ttabs: (selector?: any) => JQuery & JQueryWithTabs;\r\n}\r\nexport const $$ = $window.jQuery as any as (...args: any[]) => JQuery & JQueryWithTabs;\r\nexport const instance = $window.instance || 0;\r\nexport const _ = $window._ || ((text: string) => text);\r\nexport const socket = $window.socket;\r\nexport const sendTo = $window.sendTo;\r\n\n\n\n// WEBPACK FOOTER //\n// ./admin/src/lib/adapter.ts","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nimport {$$, $window, _, instance} from \"../lib/adapter\";\r\n\r\nimport Fragment from \"../components/fragment\";\r\n\r\n// Load communication objects as defined in the message module\r\nimport { Group } from \"../../../src/adapter/communication\";\r\n\r\nexport interface GroupDictionary {\r\n\t[id: string]: Group;\r\n}\r\ninterface GroupsProps {\r\n\tgroups: GroupDictionary;\r\n}\r\n\r\nexport class Groups extends React.Component<GroupsProps, any> {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t}\r\n\r\n\tpublic render() {\r\n\t\tconsole.log(`rendering groups (length=${Object.keys(this.props.groups).length})`);\r\n\t\treturn (\r\n\t\t\t<Fragment>\r\n\t\t\t\t<table id=\"virtual-groups\">\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr className=\"ui-widget-header\">\r\n\t\t\t\t\t\t\t<td className=\"id\">{_(\"ID\")}</td>\r\n\t\t\t\t\t\t\t<td className=\"name\">{_(\"Name\")}</td>\r\n\t\t\t\t\t\t\t<td className=\"devices\">{_(\"Devices\")}</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{(this.props.groups && Object.keys(this.props.groups).length > 0 ? (\r\n\t\t\t\t\t\t\tObject.keys(this.props.groups)\r\n\t\t\t\t\t\t\t.map(k => this.props.groups[k])\r\n\t\t\t\t\t\t\t.map(group => (\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td>{group.id}</td>\r\n\t\t\t\t\t\t\t\t<td>{group.name}</td>\r\n\t\t\t\t\t\t\t\t{/* TODO: Turn this into a multiselect dropdown */}\r\n\t\t\t\t\t\t\t\t<td>{group.deviceIDs ? group.deviceIDs.join(\", \") : \"\"}</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td className=\"empty\" colSpan={3}>{_(\"No virtual groups defined\")}</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t</Fragment>\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./admin/src/pages/groups.tsx","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nimport {$$, $window, _, instance} from \"../lib/adapter\";\r\n\r\nimport Fragment from \"../components/fragment\";\r\n\r\nexport type OnSettingsChangedCallback = (newSettings: DictionaryLike<any>, hasChanges: boolean) => void;\r\n\r\ninterface SettingsProps {\r\n\tonChange: OnSettingsChangedCallback;\r\n\tsettings: DictionaryLike<any>;\r\n}\r\n\r\ninterface DictionaryLike<T> {\r\n\t[key: string]: T;\r\n}\r\n\r\n/** Helper component for a settings label */\r\nfunction Label(props) {\r\n\treturn <label htmlFor={props.for} className={(props.class || []).join(\" \")}>{_(props.text)} </label>;\r\n}\r\n/** Helper component for a tooltip */\r\nfunction Tooltip(props) {\r\n\treturn <img className=\"admin-tooltip-icon\" src=\"../../img/info.png\" title={_(props.text)} />;\r\n}\r\n\r\nexport class Settings extends React.Component<SettingsProps, DictionaryLike<any>> {\r\n\r\n\tconstructor(props: SettingsProps) {\r\n\t\tsuper(props);\r\n\t\t// settings are our state\r\n\t\tthis.state = {\r\n\t\t\t...props.settings,\r\n\t\t};\r\n\t\t// remember the original settings\r\n\t\tthis.originalSettings = {...props.settings};\r\n\r\n\t\t// setup change handlers\r\n\t\tthis.handleChange = this.handleChange.bind(this);\r\n\t}\r\n\r\n\tprivate onChange: OnSettingsChangedCallback;\r\n\tprivate originalSettings: DictionaryLike<any>;\r\n\r\n\t// gets called when the form elements are changed by the user\r\n\tprivate handleChange(event: React.FormEvent<HTMLElement>) {\r\n\t\tconst target = event.target as (HTMLInputElement | HTMLSelectElement); // TODO: more types\r\n\r\n\t\t// store the setting\r\n\t\tthis.putSetting(target.id, target.value, () => {\r\n\t\t\t// and notify the admin UI about changes\r\n\t\t\tthis.props.onChange(this.state, this.hasChanges());\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Reads a setting from the state object and transforms the value into the correct format\r\n\t * @param key The setting key to lookup\r\n\t */\r\n\tprivate getSetting(key: string): string | number | string[] {\r\n\t\treturn this.state[key] as any;\r\n\t}\r\n\t/**\r\n\t * Saves a setting in the state object and transforms the value into the correct format\r\n\t * @param key The setting key to store at\r\n\t */\r\n\tprivate putSetting(key: string, value: string | number | string[], callback?: () => void): void {\r\n\t\tthis.setState({[key]: value as any}, callback);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if any setting was changed\r\n\t */\r\n\tprivate hasChanges(): boolean {\r\n\t\tfor (const key of Object.keys(this.originalSettings)) {\r\n\t\t\tif (this.originalSettings[key] !== this.state[key]) return true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic onSave(): any {\r\n\t\treturn this.state;\r\n\t}\r\n\r\n\tpublic render() {\r\n\t\treturn (\r\n\t\t\t<p key=\"content\" className=\"settings-table\">\r\n\t\t\t\t<Label for=\"host\" text=\"Gateway IP/Hostname:\" />\r\n\t\t\t\t<Tooltip text=\"hostname tooltip\" />\r\n\t\t\t\t<input className=\"value\" id=\"host\" value={this.getSetting(\"host\")} onChange={this.handleChange} /><br />\r\n\r\n\t\t\t\t<Label for=\"securityCode\" text=\"Security-Code:\" />\r\n\t\t\t\t<Tooltip text=\"security code tooltip\" />\r\n\t\t\t\t<input className=\"value\" id=\"securityCode\" value={this.getSetting(\"securityCode\")} onChange={this.handleChange}  />\r\n\t\t\t</p>\r\n\t\t);\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./admin/src/pages/settings.tsx"],"mappings":";;;;;;;;AAAA;AACA;AACA;AAFA;;;;;;;;;;;ACEA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAGA;AAKA;AACA;AAjCA;;;;;;;;;;;ACLA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AAEA;AAnDA;AAqDA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC/FA;AAaA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACtBA;AAGA;AAEA;AAYA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAEA;AACA;AAEA;AAKA;AAOA;AAEA;AAzCA;;;;;;;;;;;ACjBA;AAGA;AAeA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAGA;AACA;AAvEA;;;;;A","sourceRoot":""}