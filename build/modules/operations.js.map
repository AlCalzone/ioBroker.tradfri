{
  "version": 3,
  "sources": ["../../src/modules/operations.ts"],
  "sourcesContent": ["/**\n * Provides operations for Tradfri devices using the CoAP layer\n */\n\nimport {\n\tAccessory,\n\tAccessoryTypes,\n\tAirPurifierOperation,\n\tBlindOperation,\n\tGroup,\n\tLightOperation,\n\tPlugOperation,\n} from \"node-tradfri-client\";\nimport { VirtualGroup } from \"../lib/virtual-group\";\nimport { session as $ } from \"./session\";\n\n/**\n * Sets some properties on virtual group or virtual properties on a real group.\n * Can be used to manually update non-existing endpoints on real groups.\n * @param group The group to be updated\n * @param operation The properties to be set\n * @returns true if a request was sent, false otherwise\n */\nexport async function operateVirtualGroup(\n\tgroup: Group | VirtualGroup,\n\toperation:\n\t\t| LightOperation\n\t\t| BlindOperation\n\t\t| PlugOperation\n\t\t| AirPurifierOperation,\n): Promise<void> {\n\tif (group.deviceIDs == undefined) return;\n\t// Test which kind of operation this is\n\tif (\"position\" in operation) {\n\t\t// This is a blind operation\n\t\t// find all blinds belonging to this group\n\t\tconst blindAccessories = group.deviceIDs\n\t\t\t.map((id) => $.devices[id])\n\t\t\t.filter((dev) => dev != null && dev.type === AccessoryTypes.blind);\n\n\t\tfor (const acc of blindAccessories) {\n\t\t\tawait $.tradfri.operateBlind(acc, operation);\n\t\t}\n\t} else if (\n\t\t\"fanMode\" in operation ||\n\t\t\"fanSpeed\" in operation ||\n\t\t\"statusLEDs\" in operation ||\n\t\t\"controlsLocked\" in operation\n\t) {\n\t\t// This is an air purifier operation\n\t\t// find all air purifiers belonging to this group\n\t\tconst apAccessories = group.deviceIDs\n\t\t\t.map((id) => $.devices[id])\n\t\t\t.filter(\n\t\t\t\t(dev) => dev != null && dev.type === AccessoryTypes.airPurifier,\n\t\t\t);\n\n\t\tfor (const acc of apAccessories) {\n\t\t\tawait $.tradfri.operateAirPurifier(acc, operation);\n\t\t}\n\t} else {\n\t\t// This is a light or plug operation\n\t\t// find all lightbulbs belonging to this group\n\t\tconst lightbulbAccessories = group.deviceIDs\n\t\t\t.map((id) => $.devices[id])\n\t\t\t.filter(\n\t\t\t\t(dev) => dev != null && dev.type === AccessoryTypes.lightbulb,\n\t\t\t);\n\t\tconst plugAccessories = group.deviceIDs\n\t\t\t.map((id) => $.devices[id])\n\t\t\t.filter((dev) => dev != null && dev.type === AccessoryTypes.plug);\n\n\t\tif (\"onOff\" in operation || \"dimmer\" in operation) {\n\t\t\t// This operation is compatible with plugs\n\t\t\tfor (const acc of plugAccessories) {\n\t\t\t\tawait $.tradfri.operatePlug(acc, operation as PlugOperation);\n\t\t\t}\n\t\t}\n\n\t\tfor (const acc of lightbulbAccessories) {\n\t\t\tawait $.tradfri.operateLight(acc, operation as LightOperation);\n\t\t}\n\t}\n\t// and update the group\n\tif (group instanceof VirtualGroup) {\n\t\tgroup.merge(operation);\n\t}\n}\n\n/**\n * Stops all blinds in a virtual group\n * @param group The virtual group which contains the blinds to be stopped\n */\nexport async function stopBlinds(group: VirtualGroup): Promise<void> {\n\tif (group.deviceIDs == undefined) return;\n\n\tconst blindAccessories = group.deviceIDs\n\t\t.map((id) => $.devices[id])\n\t\t.filter((dev) => dev != null && dev.type === AccessoryTypes.blind);\n\tfor (const acc of blindAccessories) {\n\t\tawait acc.blindList[0].stop();\n\t}\n}\n\n/**\n * Renames a device\n * @param accessory The device to be renamed\n * @param newName The new name to be given to the device\n * @returns true if a request was sent, false otherwise\n */\nexport function renameDevice(\n\taccessory: Accessory,\n\tnewName: string,\n): Promise<boolean> {\n\t// create a copy to modify\n\tconst newAccessory = accessory.clone();\n\tnewAccessory.name = newName;\n\n\treturn $.tradfri.updateDevice(newAccessory);\n}\n\n/**\n * Renames a group\n * @param group The group to be renamed\n * @param newName The new name to be given to the group\n * @returns true if a request was sent, false otherwise\n */\nexport function renameGroup(group: Group, newName: string): Promise<boolean> {\n\t// create a copy to modify\n\tconst newGroup = group.clone();\n\tnewGroup.name = newName;\n\n\treturn $.tradfri.updateGroup(newGroup);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,iCAQO;AACP,2BAA6B;AAC7B,qBAA6B;AAS7B,mCACC,OACA,WAKgB;AAChB,MAAI,MAAM,aAAa;AAAW;AAElC,MAAI,cAAc,WAAW;AAG5B,UAAM,mBAAmB,MAAM,UAC7B,IAAI,CAAC,OAAO,uBAAE,QAAQ,KACtB,OAAO,CAAC,QAAQ,OAAO,QAAQ,IAAI,SAAS,0CAAe;AAE7D,eAAW,OAAO,kBAAkB;AACnC,YAAM,uBAAE,QAAQ,aAAa,KAAK;AAAA;AAAA,aAGnC,aAAa,aACb,cAAc,aACd,gBAAgB,aAChB,oBAAoB,WACnB;AAGD,UAAM,gBAAgB,MAAM,UAC1B,IAAI,CAAC,OAAO,uBAAE,QAAQ,KACtB,OACA,CAAC,QAAQ,OAAO,QAAQ,IAAI,SAAS,0CAAe;AAGtD,eAAW,OAAO,eAAe;AAChC,YAAM,uBAAE,QAAQ,mBAAmB,KAAK;AAAA;AAAA,SAEnC;AAGN,UAAM,uBAAuB,MAAM,UACjC,IAAI,CAAC,OAAO,uBAAE,QAAQ,KACtB,OACA,CAAC,QAAQ,OAAO,QAAQ,IAAI,SAAS,0CAAe;AAEtD,UAAM,kBAAkB,MAAM,UAC5B,IAAI,CAAC,OAAO,uBAAE,QAAQ,KACtB,OAAO,CAAC,QAAQ,OAAO,QAAQ,IAAI,SAAS,0CAAe;AAE7D,QAAI,WAAW,aAAa,YAAY,WAAW;AAElD,iBAAW,OAAO,iBAAiB;AAClC,cAAM,uBAAE,QAAQ,YAAY,KAAK;AAAA;AAAA;AAInC,eAAW,OAAO,sBAAsB;AACvC,YAAM,uBAAE,QAAQ,aAAa,KAAK;AAAA;AAAA;AAIpC,MAAI,iBAAiB,mCAAc;AAClC,UAAM,MAAM;AAAA;AAAA;AAQd,0BAAiC,OAAoC;AACpE,MAAI,MAAM,aAAa;AAAW;AAElC,QAAM,mBAAmB,MAAM,UAC7B,IAAI,CAAC,OAAO,uBAAE,QAAQ,KACtB,OAAO,CAAC,QAAQ,OAAO,QAAQ,IAAI,SAAS,0CAAe;AAC7D,aAAW,OAAO,kBAAkB;AACnC,UAAM,IAAI,UAAU,GAAG;AAAA;AAAA;AAUlB,sBACN,WACA,SACmB;AAEnB,QAAM,eAAe,UAAU;AAC/B,eAAa,OAAO;AAEpB,SAAO,uBAAE,QAAQ,aAAa;AAAA;AASxB,qBAAqB,OAAc,SAAmC;AAE5E,QAAM,WAAW,MAAM;AACvB,WAAS,OAAO;AAEhB,SAAO,uBAAE,QAAQ,YAAY;AAAA;",
  "names": []
}
