{
  "version": 3,
  "sources": ["../../src/lib/iobroker-objects.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { assertNever } from \"alcalzone-shared/helpers\";\nimport {\n\tcomposeObject,\n\tentries,\n\tfilter,\n\tvalues,\n} from \"alcalzone-shared/objects\";\nimport {\n\tAccessory,\n\tAccessoryTypes,\n\tGroup,\n\tGroupInfo,\n\tPowerSources,\n\tScene,\n\tSpectrum,\n} from \"node-tradfri-client\";\nimport { session as $ } from \"../modules/session\";\nimport { Global as _ } from \"./global\";\nimport { roundTo } from \"./math\";\nimport { dig } from \"./object-polyfill\";\nimport { padStart } from \"./strings\";\nimport { VirtualGroup } from \"./virtual-group\";\n\n/**\n * Returns the common part of the ioBroker object representing the given accessory\n */\nexport function accessoryToCommon(accessory: Accessory): ioBroker.ObjectCommon {\n\tconst ret: ioBroker.ObjectCommon = {\n\t\tname: accessory.name || accessory.deviceInfo.modelNumber,\n\t};\n\tconst icon = getAccessoryIcon(accessory);\n\tif (icon != null) ret.icon = \"icons/\" + icon;\n\treturn ret;\n}\n\n/**\n * Returns the native part of the ioBroker object representing the given accessory\n */\nexport function accessoryToNative(accessory: Accessory): Record<string, any> {\n\treturn {\n\t\tinstanceId: accessory.instanceId,\n\t\tmanufacturer: accessory.deviceInfo.manufacturer,\n\t\tfirmwareVersion: accessory.deviceInfo.firmwareVersion,\n\t\tmodelNumber: accessory.deviceInfo.modelNumber,\n\t\ttype: AccessoryTypes[accessory.type],\n\t\tserialNumber: accessory.deviceInfo.serialNumber,\n\t};\n}\n\n/**\n * Creates or edits an existing <device>-object for an accessory.\n * @param accessory The accessory to update\n */\nexport async function extendDevice(accessory: Accessory): Promise<void> {\n\tconst objId = calcObjId(accessory);\n\n\tif (objId in $.objects) {\n\t\t// check if we need to edit the existing object\n\t\tconst devObj = $.objects[objId];\n\t\tlet changed = false;\n\t\t// update common part if neccessary\n\t\tconst newCommon = accessoryToCommon(accessory);\n\t\tif (JSON.stringify(devObj.common) !== JSON.stringify(newCommon)) {\n\t\t\t// merge the common objects\n\t\t\tObject.assign(devObj.common, newCommon);\n\t\t\tchanged = true;\n\t\t}\n\t\tconst newNative = accessoryToNative(accessory);\n\t\t// update native part if neccessary\n\t\tif (JSON.stringify(devObj.native) !== JSON.stringify(newNative)) {\n\t\t\t// merge the native objects\n\t\t\tObject.assign(devObj.native, newNative);\n\t\t\tchanged = true;\n\t\t}\n\t\tif (changed) await _.adapter.extendObjectAsync(objId, devObj);\n\n\t\t// ====\n\n\t\t// from here we can update the states\n\t\t// filter out the ones belonging to this device with a property path\n\t\tconst stateObjs = filter(\n\t\t\t$.objects,\n\t\t\t(obj) => obj._id.startsWith(objId) && obj.native && obj.native.path,\n\t\t);\n\t\t// for each property try to update the value\n\t\tfor (const [id, obj] of entries(stateObjs)) {\n\t\t\tif (\n\t\t\t\t_.adapter.config.preserveTransitionTime &&\n\t\t\t\tid.match(/\\.transitionDuration$/g)\n\t\t\t) {\n\t\t\t\t// don't override the transition time\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\t// Object could have a default value, find it\n\t\t\t\tlet newValue = dig<any>(accessory, obj.native.path);\n\t\t\t\tif (typeof newValue === \"function\") continue;\n\t\t\t\tconst roundToDigits = _.adapter.config.roundToDigits;\n\t\t\t\tif (\n\t\t\t\t\ttypeof roundToDigits === \"number\" &&\n\t\t\t\t\ttypeof newValue === \"number\"\n\t\t\t\t) {\n\t\t\t\t\tnewValue = roundTo(newValue, roundToDigits);\n\t\t\t\t}\n\t\t\t\tif (obj.native.onlyChanges) {\n\t\t\t\t\tawait _.adapter.setStateChangedAsync(\n\t\t\t\t\t\tid,\n\t\t\t\t\t\t(newValue as any) ?? null,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tawait _.adapter.setStateAsync(\n\t\t\t\t\t\tid,\n\t\t\t\t\t\t(newValue as any) ?? null,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t/* skip this value */\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// create new object\n\t\tconst devObj: ioBroker.Object = {\n\t\t\t_id: objId,\n\t\t\ttype: \"device\",\n\t\t\tcommon: accessoryToCommon(accessory),\n\t\t\tnative: accessoryToNative(accessory),\n\t\t};\n\t\tawait _.adapter.setObjectAsync(objId, devObj);\n\n\t\t// also create state objects, depending on the accessory type\n\t\tconst stateObjs: Record<string, ioBroker.Object> = {\n\t\t\talive: {\n\t\t\t\t// alive state\n\t\t\t\t_id: `${objId}.alive`,\n\t\t\t\ttype: \"state\",\n\t\t\t\tcommon: {\n\t\t\t\t\tname: \"device alive\",\n\t\t\t\t\tread: true,\n\t\t\t\t\twrite: false,\n\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\trole: \"indicator.alive\",\n\t\t\t\t\tdesc: \"indicates if the device is currently alive and connected to the gateway\",\n\t\t\t\t},\n\t\t\t\tnative: {\n\t\t\t\t\tpath: \"alive\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tlastSeen: {\n\t\t\t\t// last seen state\n\t\t\t\t_id: `${objId}.lastSeen`,\n\t\t\t\ttype: \"state\",\n\t\t\t\tcommon: {\n\t\t\t\t\tname: \"last seen timestamp\",\n\t\t\t\t\tread: true,\n\t\t\t\t\twrite: false,\n\t\t\t\t\ttype: \"number\",\n\t\t\t\t\trole: \"indicator.lastSeen\",\n\t\t\t\t\tdesc: \"indicates when the device has last been seen by the gateway\",\n\t\t\t\t},\n\t\t\t\tnative: {\n\t\t\t\t\tpath: \"lastSeen\",\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\tif (\n\t\t\taccessory.type === AccessoryTypes.lightbulb ||\n\t\t\taccessory.type === AccessoryTypes.plug\n\t\t) {\n\t\t\tlet channelName: string;\n\t\t\tlet channelID: string;\n\t\t\tif (accessory.type === AccessoryTypes.lightbulb) {\n\t\t\t\tlet spectrum: Spectrum = \"none\";\n\t\t\t\tif (\n\t\t\t\t\taccessory.lightList != null &&\n\t\t\t\t\taccessory.lightList.length > 0\n\t\t\t\t) {\n\t\t\t\t\tspectrum = accessory.lightList[0].spectrum;\n\t\t\t\t}\n\t\t\t\tif (spectrum === \"none\") {\n\t\t\t\t\tchannelName = \"Lightbulb\";\n\t\t\t\t} else if (spectrum === \"white\") {\n\t\t\t\t\tchannelName = \"Lightbulb (white spectrum)\";\n\t\t\t\t} else if (spectrum === \"rgb\") {\n\t\t\t\t\tchannelName = \"RGB Lightbulb\";\n\t\t\t\t}\n\n\t\t\t\t// obj.lightbulb should be a channel\n\t\t\t\tchannelID = \"lightbulb\";\n\t\t\t\tstateObjs[channelID] = {\n\t\t\t\t\t_id: `${objId}.${channelID}`,\n\t\t\t\t\ttype: \"channel\",\n\t\t\t\t\tcommon: {\n\t\t\t\t\t\tname: channelName!,\n\t\t\t\t\t\trole: \"light\",\n\t\t\t\t\t},\n\t\t\t\t\tnative: {\n\t\t\t\t\t\tspectrum: spectrum, // remember the spectrum, so we can update different properties later\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\tif (spectrum === \"white\") {\n\t\t\t\t\tstateObjs[`${channelID}.colorTemperature`] =\n\t\t\t\t\t\tobjectDefinitions.colorTemperature(objId, \"device\");\n\t\t\t\t} else if (spectrum === \"rgb\") {\n\t\t\t\t\tstateObjs[`${channelID}.color`] = objectDefinitions.color(\n\t\t\t\t\t\tobjId,\n\t\t\t\t\t\t\"device\",\n\t\t\t\t\t);\n\t\t\t\t\tstateObjs[`${channelID}.hue`] = objectDefinitions.hue(\n\t\t\t\t\t\tobjId,\n\t\t\t\t\t\t\"device\",\n\t\t\t\t\t);\n\t\t\t\t\tstateObjs[`${channelID}.saturation`] =\n\t\t\t\t\t\tobjectDefinitions.saturation(objId, \"device\");\n\t\t\t\t}\n\t\t\t\tstateObjs[`${channelID}.transitionDuration`] =\n\t\t\t\t\tobjectDefinitions.transitionDuration(\n\t\t\t\t\t\tobjId,\n\t\t\t\t\t\t\"device\",\n\t\t\t\t\t\taccessory.type,\n\t\t\t\t\t);\n\t\t\t\tstateObjs[`${channelID}.whenPowerRestored`] =\n\t\t\t\t\tobjectDefinitions.whenPowerRestored(objId, \"device\");\n\t\t\t} /* if (accessory.type === AccessoryTypes.plug) */ else {\n\t\t\t\t// obj.plug should be a channel\n\t\t\t\tchannelID = \"plug\";\n\t\t\t\tstateObjs[channelID] = {\n\t\t\t\t\t_id: `${objId}.${channelID}`,\n\t\t\t\t\ttype: \"channel\",\n\t\t\t\t\tcommon: {\n\t\t\t\t\t\tname: channelName!,\n\t\t\t\t\t\trole: \"switch\",\n\t\t\t\t\t},\n\t\t\t\t\tnative: {},\n\t\t\t\t};\n\t\t\t}\n\t\t\t// Common properties for both plugs and lights\n\t\t\t// We keep brightness for now, so groups of plugs and lights can use dimmer commands\n\t\t\tstateObjs[`${channelID}.brightness`] = objectDefinitions.brightness(\n\t\t\t\tobjId,\n\t\t\t\t\"device\",\n\t\t\t\taccessory.type,\n\t\t\t);\n\t\t\tstateObjs[`${channelID}.state`] = objectDefinitions.onOff(\n\t\t\t\tobjId,\n\t\t\t\t\"device\",\n\t\t\t\taccessory.type,\n\t\t\t);\n\t\t}\n\n\t\tif (\n\t\t\taccessory.deviceInfo.power === PowerSources.Battery ||\n\t\t\taccessory.deviceInfo.power === PowerSources.InternalBattery ||\n\t\t\taccessory.deviceInfo.power === PowerSources.ExternalBattery\n\t\t) {\n\t\t\tif (accessory.deviceInfo.battery != undefined) {\n\t\t\t\t// Some 3rd party devices send no battery info\n\t\t\t\tstateObjs.battery = objectDefinitions.batteryPercentage(\n\t\t\t\t\tobjId,\n\t\t\t\t\t\"device\",\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (accessory.type === AccessoryTypes.blind) {\n\t\t\tstateObjs.position = objectDefinitions.position(\n\t\t\t\tobjId,\n\t\t\t\t\"device\",\n\t\t\t\taccessory.type,\n\t\t\t);\n\t\t\tstateObjs.stopBlinds = objectDefinitions.stopBlinds(\n\t\t\t\tobjId,\n\t\t\t\t\"device\",\n\t\t\t\taccessory.type,\n\t\t\t);\n\t\t}\n\n\t\tif (accessory.type === AccessoryTypes.airPurifier) {\n\t\t\tfor (const prop of [\n\t\t\t\t\"airQuality\",\n\t\t\t\t\"fanMode\",\n\t\t\t\t\"fanSpeed\",\n\t\t\t\t\"statusLEDs\",\n\t\t\t\t\"controlsLocked\",\n\t\t\t\t\"filterLifetime\",\n\t\t\t\t\"filterRuntime\",\n\t\t\t\t\"filterRemainingLifetime\",\n\t\t\t\t\"filterStatus\",\n\t\t\t] as const) {\n\t\t\t\tstateObjs[prop] = objectDefinitions[prop](\n\t\t\t\t\tobjId,\n\t\t\t\t\t\"device\",\n\t\t\t\t\taccessory.type,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Now create all objects\n\t\tfor (const obj of values(stateObjs)) {\n\t\t\tlet initialValue = null;\n\t\t\tif (obj.native.path != null) {\n\t\t\t\t// Object could have a default value, find it\n\t\t\t\tinitialValue = dig<any>(accessory, obj.native.path);\n\t\t\t\tif (typeof initialValue === \"function\") initialValue = null;\n\t\t\t}\n\t\t\tawait _.adapter.createOwnStateExAsync(obj._id, obj, initialValue);\n\t\t}\n\t}\n}\n\n/**\n * Updates the possible scenes for a group\n * @param groupInfo The group to update\n */\nexport async function updatePossibleScenes(\n\tgroupInfo: GroupInfo,\n): Promise<void> {\n\tconst group = groupInfo.group;\n\t// if this group is not in the dictionary, don't do anything\n\tif (!(group.instanceId in $.groups)) return;\n\t// find out which is the root object id\n\tconst objId = calcGroupId(group);\n\t// scenes are stored under <objId>.activeScene\n\tconst scenesId = `${objId}.activeScene`;\n\n\t// only extend that object if it exists already\n\tif (scenesId in $.objects) {\n\t\t// map scene ids and names to the dropdown\n\t\tconst scenes = groupInfo.scenes;\n\t\tconst newDropdownStates = composeObject(\n\t\t\tObject.keys(scenes).map(\n\t\t\t\t(id) => [id, scenes[id].name] as [string, string],\n\t\t\t),\n\t\t);\n\t\t// compare with the old dropdown states\n\t\tconst obj = (await _.adapter.getObjectAsync(\n\t\t\tscenesId,\n\t\t)) as ioBroker.StateObject;\n\t\tconst oldDropdownStates = obj.common.states;\n\t\tif (\n\t\t\tJSON.stringify(newDropdownStates) !==\n\t\t\tJSON.stringify(oldDropdownStates)\n\t\t) {\n\t\t\t// and only log and update if something changed\n\t\t\t_.log(\n\t\t\t\t`updating possible scenes for group ${\n\t\t\t\t\tgroup.instanceId\n\t\t\t\t}: ${JSON.stringify(Object.keys(groupInfo.scenes))}`,\n\t\t\t);\n\t\t\tobj.common.states = newDropdownStates;\n\t\t\tawait _.adapter.setObjectAsync(scenesId, obj);\n\t\t}\n\t}\n}\n\nexport function getAccessoryIcon(accessory: Accessory): string | undefined {\n\tif (accessory.type === AccessoryTypes.blind) {\n\t\treturn \"blind.png\";\n\t}\n\tconst model = accessory.deviceInfo.modelNumber;\n\tswitch (model) {\n\t\tcase \"TRADFRI remote control\":\n\t\t\treturn \"remote.png\";\n\t\tcase \"TRADFRI motion sensor\":\n\t\t\treturn \"motion_sensor.png\";\n\t\tcase \"TRADFRI wireless dimmer\":\n\t\t\treturn \"remote_dimmer.png\";\n\t\tcase \"TRADFRI plug\":\n\t\t\treturn \"plug.png\";\n\t}\n\tif (model.indexOf(\" control outlet \") > -1) {\n\t\treturn \"plug.png\";\n\t} else if (\n\t\tmodel.toLowerCase().indexOf(\" transformer \") > -1 ||\n\t\tmodel.toLowerCase().indexOf(\" driver \") > -1\n\t) {\n\t\treturn \"transformer.png\";\n\t}\n\tif (accessory.type === AccessoryTypes.lightbulb) {\n\t\tlet prefix: string;\n\t\tif (model.indexOf(\" panel \") > -1) {\n\t\t\tprefix = \"panel\";\n\t\t} else if (model.indexOf(\" door \") > -1) {\n\t\t\tprefix = \"door\";\n\t\t} else if (model.indexOf(\" GU10 \") > -1) {\n\t\t\tprefix = \"gu10\";\n\t\t} else {\n\t\t\tprefix = \"bulb\";\n\t\t}\n\t\tlet suffix = \"\";\n\t\tconst spectrum = accessory.lightList[0].spectrum;\n\t\tif (spectrum === \"white\") {\n\t\t\tsuffix = \"_ws\";\n\t\t} else if (spectrum === \"rgb\") {\n\t\t\tsuffix = \"_rgb\";\n\t\t}\n\t\treturn prefix + suffix + \".png\";\n\t}\n}\n\n/**\n * Returns the ioBroker id of the root object for the given state\n */\nexport function getRootId(stateId: string): string | undefined {\n\tconst match = /^tradfri\\.\\d+\\.\\w+\\-\\d+/.exec(stateId);\n\tif (match) return match[0];\n}\n/**\n * Extracts the instance id from a given state or object id\n * @param id State or object id whose instance id should be extracted\n */\nexport function getInstanceId(id: string): number | undefined {\n\tconst match = /^tradfri\\.\\d+\\.\\w+\\-(\\d+)/.exec(id);\n\tif (match) return +match[1];\n}\n\n/**\n * Determines the object ID under which the given accessory should be stored\n */\nexport function calcObjId(accessory: Accessory): string {\n\treturn `${_.adapter.namespace}.${calcObjName(accessory)}`;\n}\n/**\n * Determines the object name under which the given group accessory be stored,\n * excluding the adapter namespace\n */\nexport function calcObjName(accessory: Accessory): string {\n\tlet prefix: string;\n\tswitch (accessory.type) {\n\t\tcase AccessoryTypes.remote:\n\t\tcase AccessoryTypes.slaveRemote:\n\t\t\tprefix = \"RC\";\n\t\t\tbreak;\n\t\tcase AccessoryTypes.lightbulb:\n\t\t\tprefix = \"L\";\n\t\t\tbreak;\n\t\tcase AccessoryTypes.plug:\n\t\t\tprefix = \"P\";\n\t\t\tbreak;\n\t\tcase AccessoryTypes.blind:\n\t\t\tprefix = \"B\";\n\t\t\tbreak;\n\t\tcase AccessoryTypes.signalRepeater:\n\t\t\tprefix = \"SR\";\n\t\t\tbreak;\n\t\tcase AccessoryTypes.motionSensor:\n\t\t\tprefix = \"MS\";\n\t\t\tbreak;\n\t\tcase AccessoryTypes.soundRemote:\n\t\t\tprefix = \"S\";\n\t\t\tbreak;\n\t\tcase AccessoryTypes.airPurifier:\n\t\t\tprefix = \"AP\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t_.log(\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\t\t\t\t`Unknown accessory type ${accessory.type}. Please send this info to the developer with a short description of the device!`,\n\t\t\t\t\"warn\",\n\t\t\t);\n\t\t\tprefix = \"XYZ\";\n\t\t\tbreak;\n\t}\n\treturn `${prefix}-${accessory.instanceId}`;\n}\n\n/**\n * Returns the common part of the ioBroker object representing the given group\n */\nexport function groupToCommon(\n\tgroup: Group | VirtualGroup,\n): ioBroker.ObjectCommon {\n\tlet name: string;\n\tif (group instanceof Group) {\n\t\tname = group.name;\n\t} else if (group instanceof VirtualGroup) {\n\t\tif (typeof group.name === \"string\" && group.name.length > 0) {\n\t\t\tname = group.name;\n\t\t} else {\n\t\t\tname = `virtual group ${group.instanceId}`;\n\t\t}\n\t} else return assertNever(group);\n\treturn { name };\n}\n\n/**\n * Returns the native part of the ioBroker object representing the given group\n */\nexport function groupToNative(\n\tgroup: Group | VirtualGroup,\n): Record<string, any> {\n\treturn {\n\t\tinstanceId: group.instanceId,\n\t\tdeviceIDs: group.deviceIDs,\n\t\ttype: (group instanceof VirtualGroup ? \"virtual \" : \"\") + \"group\",\n\t};\n}\n\n/**\n * Determines the object ID under which the given group should be stored\n */\nexport function calcGroupId(group: Group | VirtualGroup): string {\n\treturn `${_.adapter.namespace}.${calcGroupName(group)}`;\n}\n/**\n * Determines the object name under which the given group should be stored,\n * excluding the adapter namespace\n */\nexport function calcGroupName(group: Group | VirtualGroup): string {\n\tlet prefix: string;\n\tif (group instanceof Group) {\n\t\tprefix = \"G\";\n\t} else if (group instanceof VirtualGroup) {\n\t\tprefix = \"VG\";\n\t} else return assertNever(group);\n\tconst postfix: string = group.instanceId.toString();\n\treturn `${prefix}-${padStart(postfix, 5, \"0\")}`;\n}\n\n/**\n * Determines the object ID under which the given scene should be stored\n */\nexport function calcSceneId(scene: Scene): string {\n\treturn `${_.adapter.namespace}.${calcSceneName(scene)}`;\n}\n/**\n * Determines the object name under which the given scene should be stored,\n * excluding the adapter namespace\n */\nexport function calcSceneName(scene: Scene): string {\n\treturn `S-${scene.instanceId}`;\n}\n\nexport type ioBrokerObjectDefinition = (\n\trootId: string,\n\trootType: \"device\" | \"group\" | \"virtual group\",\n\tdeviceType?: AccessoryTypes | undefined,\n) => ioBroker.Object;\n\n/** Returns a string representation of a member of the `AccessoryTypes` enum */\nfunction accessoryTypeToString(type: AccessoryTypes) {\n\treturn AccessoryTypes[type];\n}\n\nfunction getCoapAccessoryPropertyPathPrefix(\n\tdeviceType: AccessoryTypes | undefined,\n) {\n\tswitch (deviceType) {\n\t\tcase AccessoryTypes.lightbulb:\n\t\t\treturn \"lightList.[0].\";\n\t\tcase AccessoryTypes.plug:\n\t\t\treturn \"plugList.[0].\";\n\t\tcase AccessoryTypes.blind:\n\t\t\treturn \"blindList.[0].\";\n\t\tcase AccessoryTypes.airPurifier:\n\t\t\treturn \"airPurifierList.[0].\";\n\t\tdefault:\n\t\t\treturn \"\";\n\t}\n}\n\n/**\n * Contains definitions for all kinds of states we're going to create\n */\nexport const objectDefinitions: Record<string, ioBrokerObjectDefinition> = {\n\tactiveScene: (rootId, _rootType, _deviceType) => ({\n\t\t_id: `${rootId}.activeScene`,\n\t\ttype: \"state\",\n\t\tcommon: {\n\t\t\tname: \"active scene\",\n\t\t\tread: true,\n\t\t\twrite: true,\n\t\t\ttype: \"number\",\n\t\t\trole: \"value.id\",\n\t\t\tdesc: \"the instance id of the currently active scene\",\n\t\t},\n\t\tnative: {\n\t\t\tpath: \"sceneId\",\n\t\t},\n\t}),\n\n\t// Lights and plugs\n\tonOff: (rootId, rootType, deviceType) => ({\n\t\t_id:\n\t\t\trootType === \"device\"\n\t\t\t\t? `${rootId}.${accessoryTypeToString(deviceType!)}.state`\n\t\t\t\t: `${rootId}.state`,\n\t\ttype: \"state\",\n\t\tcommon: {\n\t\t\tname: \"on/off\",\n\t\t\tread: true,\n\t\t\twrite: true,\n\t\t\ttype: \"boolean\",\n\t\t\trole: \"switch\",\n\t\t},\n\t\tnative: {\n\t\t\tpath: getCoapAccessoryPropertyPathPrefix(deviceType) + \"onOff\",\n\t\t},\n\t}),\n\n\t// Lights only\n\twhenPowerRestored: (rootId, rootType, deviceType) => {\n\t\tconst ret: ioBroker.Object = {\n\t\t\t_id:\n\t\t\t\trootType === \"device\"\n\t\t\t\t\t? `${rootId}.lightbulb.whenPowerRestored`\n\t\t\t\t\t: `${rootId}.whenPowerRestored`,\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Action when power restored\",\n\t\t\t\tread: true,\n\t\t\t\twrite: true,\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"level\",\n\t\t\t\tstates: {\n\t\t\t\t\t\"2\": \"Turn on\",\n\t\t\t\t\t\"4\": \"Previous state\",\n\t\t\t\t},\n\t\t\t\tdesc:\n\t\t\t\t\trootType === \"device\"\n\t\t\t\t\t\t? \"What this device should do after power is restored\"\n\t\t\t\t\t\t: \"What devices in this group should do after power is restored\",\n\t\t\t},\n\t\t\tnative: {\n\t\t\t\tpath:\n\t\t\t\t\tgetCoapAccessoryPropertyPathPrefix(deviceType) +\n\t\t\t\t\t\"whenPowerRestored\",\n\t\t\t},\n\t\t};\n\t\treturn ret;\n\t},\n\n\t// Lights and plugs for compatibility reasons\n\t// Anything > 0% should be \"on\"\n\tbrightness: (rootId, rootType, deviceType) => {\n\t\tconst deviceName =\n\t\t\trootType === \"device\"\n\t\t\t\t? accessoryTypeToString(deviceType!)\n\t\t\t\t: undefined;\n\t\treturn {\n\t\t\t_id:\n\t\t\t\trootType === \"device\"\n\t\t\t\t\t? `${rootId}.${deviceName}.brightness`\n\t\t\t\t\t: `${rootId}.brightness`,\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Brightness\",\n\t\t\t\tread: true,\n\t\t\t\twrite: true,\n\t\t\t\tmin: 0,\n\t\t\t\tmax: 100,\n\t\t\t\tunit: \"%\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"level.dimmer\",\n\t\t\t\tdesc:\n\t\t\t\t\trootType === \"device\"\n\t\t\t\t\t\t? `Brightness of the ${deviceName}`\n\t\t\t\t\t\t: `Brightness of this group's ${deviceName}s`,\n\t\t\t},\n\t\t\tnative: {\n\t\t\t\tpath: getCoapAccessoryPropertyPathPrefix(deviceType) + \"dimmer\",\n\t\t\t},\n\t\t};\n\t},\n\n\t// Lights only?\n\ttransitionDuration: (rootId, rootType, deviceType) => ({\n\t\t_id:\n\t\t\trootType === \"device\"\n\t\t\t\t? `${rootId}.lightbulb.transitionDuration`\n\t\t\t\t: `${rootId}.transitionDuration`,\n\t\ttype: \"state\",\n\t\tcommon: {\n\t\t\tname: \"Transition duration\",\n\t\t\tread: false,\n\t\t\twrite: true,\n\t\t\ttype: \"number\",\n\t\t\tmin: 0,\n\t\t\tmax: 100, // TODO: check\n\t\t\tdef: 0,\n\t\t\trole: \"light.dimmer\", // TODO: better role?\n\t\t\tdesc:\n\t\t\t\trootType === \"device\"\n\t\t\t\t\t? \"Duration of a state change\"\n\t\t\t\t\t: `Duration for state changes of this group's lightbulbs`,\n\t\t\tunit: \"s\",\n\t\t},\n\t\tnative: {\n\t\t\tpath:\n\t\t\t\tgetCoapAccessoryPropertyPathPrefix(deviceType) +\n\t\t\t\t\"transitionTime\",\n\t\t},\n\t}),\n\n\t// Lights only\n\tcolorTemperature: (rootId, rootType) => {\n\t\tconst ret: ioBroker.Object = {\n\t\t\t_id:\n\t\t\t\trootType === \"device\"\n\t\t\t\t\t? `${rootId}.lightbulb.colorTemperature`\n\t\t\t\t\t: `${rootId}.colorTemperature`,\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Color temperature\",\n\t\t\t\tread: true,\n\t\t\t\twrite: true,\n\t\t\t\tmin: 0,\n\t\t\t\tmax: 100,\n\t\t\t\tunit: \"%\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"level.color.temperature\",\n\t\t\t\tdesc:\n\t\t\t\t\trootType === \"device\"\n\t\t\t\t\t\t? \"Range: 0% = cold, 100% = warm\"\n\t\t\t\t\t\t: \"Color temperature of this group's white spectrum lightbulbs. Range: 0% = cold, 100% = warm\",\n\t\t\t},\n\t\t\tnative: {},\n\t\t};\n\t\tif (rootType === \"device\") {\n\t\t\tret.native.path = \"lightList.[0].colorTemperature\";\n\t\t} else if (rootType === \"group\") {\n\t\t\t// virtual state, so no real path to an object exists\n\t\t\t// we still have to give path a value, because other functions check for its existence\n\t\t\tret.native.path = \"__virtual__\";\n\t\t} else if (rootType === \"virtual group\") {\n\t\t\tret.native.path = \"colorTemperature\";\n\t\t}\n\t\treturn ret;\n\t},\n\n\t// Lights only\n\tcolor: (rootId, rootType) => {\n\t\tconst ret: ioBroker.Object = {\n\t\t\t_id:\n\t\t\t\trootType === \"device\"\n\t\t\t\t\t? `${rootId}.lightbulb.color`\n\t\t\t\t\t: `${rootId}.color`,\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"RGB color\",\n\t\t\t\tread: true,\n\t\t\t\twrite: true,\n\t\t\t\ttype: \"string\",\n\t\t\t\trole: \"level.color.rgb\",\n\t\t\t\tdesc:\n\t\t\t\t\trootType === \"device\"\n\t\t\t\t\t\t? \"6-digit RGB hex string\"\n\t\t\t\t\t\t: \"Color of this group's RGB lightbulbs as a 6-digit hex string.\",\n\t\t\t},\n\t\t\tnative: {},\n\t\t};\n\t\tif (rootType === \"device\") {\n\t\t\tret.native.path = \"lightList.[0].color\";\n\t\t} else if (rootType === \"group\") {\n\t\t\t// virtual state, so no real path to an object exists\n\t\t\t// we still have to give path a value, because other functions check for its existence\n\t\t\tret.native.path = \"__virtual__\";\n\t\t} else if (rootType === \"virtual group\") {\n\t\t\tret.native.path = \"color\";\n\t\t}\n\t\treturn ret;\n\t},\n\n\t// Lights only\n\thue: (rootId, rootType) => {\n\t\tconst ret: ioBroker.Object = {\n\t\t\t_id:\n\t\t\t\trootType === \"device\"\n\t\t\t\t\t? `${rootId}.lightbulb.hue`\n\t\t\t\t\t: `${rootId}.hue`,\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Hue\",\n\t\t\t\tread: true,\n\t\t\t\twrite: true,\n\t\t\t\tmin: 0,\n\t\t\t\tmax: 360,\n\t\t\t\tunit: \"\u00B0\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"level.color.hue\",\n\t\t\t\tdesc:\n\t\t\t\t\trootType === \"device\"\n\t\t\t\t\t\t? \"Hue of this RGB lightbulb\"\n\t\t\t\t\t\t: \"Hue of this group's RGB lightbulbs\",\n\t\t\t},\n\t\t\tnative: {},\n\t\t};\n\t\tif (rootType === \"device\") {\n\t\t\tret.native.path = \"lightList.[0].hue\";\n\t\t} else if (rootType === \"group\") {\n\t\t\t// virtual state, so no real path to an object exists\n\t\t\t// we still have to give path a value, because other functions check for its existence\n\t\t\tret.native.path = \"__virtual__\";\n\t\t} else if (rootType === \"virtual group\") {\n\t\t\tret.native.path = \"hue\";\n\t\t}\n\t\treturn ret;\n\t},\n\n\t// Lights only\n\tsaturation: (rootId, rootType) => {\n\t\tconst ret: ioBroker.Object = {\n\t\t\t_id:\n\t\t\t\trootType === \"device\"\n\t\t\t\t\t? `${rootId}.lightbulb.saturation`\n\t\t\t\t\t: `${rootId}.saturation`,\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Saturation\",\n\t\t\t\tread: true,\n\t\t\t\twrite: true,\n\t\t\t\tmin: 0,\n\t\t\t\tmax: 100,\n\t\t\t\tunit: \"%\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"level.color.saturation\",\n\t\t\t\tdesc:\n\t\t\t\t\trootType === \"device\"\n\t\t\t\t\t\t? \"Saturation of this RGB lightbulb\"\n\t\t\t\t\t\t: \"Saturation of this group's RGB lightbulbs\",\n\t\t\t},\n\t\t\tnative: {},\n\t\t};\n\t\tif (rootType === \"device\") {\n\t\t\tret.native.path = \"lightList.[0].saturation\";\n\t\t} else if (rootType === \"group\") {\n\t\t\t// virtual state, so no real path to an object exists\n\t\t\t// we still have to give path a value, because other functions check for its existence\n\t\t\tret.native.path = \"__virtual__\";\n\t\t} else if (rootType === \"virtual group\") {\n\t\t\tret.native.path = \"saturation\";\n\t\t}\n\t\treturn ret;\n\t},\n\n\tbatteryPercentage: (rootId) => ({\n\t\t_id: `${rootId}.batteryPercentage`,\n\t\ttype: \"state\",\n\t\tcommon: {\n\t\t\tname: \"Battery percentage\",\n\t\t\tread: true,\n\t\t\twrite: false,\n\t\t\ttype: \"number\",\n\t\t\tmin: 0,\n\t\t\tmax: 100,\n\t\t\tdef: 100,\n\t\t\trole: \"indicator.maintenance\",\n\t\t\tunit: \"%\",\n\t\t},\n\t\tnative: {\n\t\t\tpath: \"deviceInfo.battery\",\n\t\t\tonlyChanges: true,\n\t\t},\n\t}),\n\n\t// Blind position: 0% is open, 100% is closed\n\tposition: (rootId, rootType, deviceType) => ({\n\t\t_id:\n\t\t\trootType === \"device\"\n\t\t\t\t? `${rootId}.${accessoryTypeToString(deviceType!)}.position`\n\t\t\t\t: `${rootId}.position`,\n\t\ttype: \"state\",\n\t\tcommon: {\n\t\t\tname: \"Blind position\",\n\t\t\tdesc:\n\t\t\t\t(rootType === \"device\"\n\t\t\t\t\t? \"Position of the blind in percent.\"\n\t\t\t\t\t: \"Position of this group's blinds in percent.\") +\n\t\t\t\t\" 0% is fully open, 100% is fully closed.\",\n\t\t\tread: true,\n\t\t\twrite: true,\n\t\t\ttype: \"number\",\n\t\t\tmin: 0,\n\t\t\tmax: 100,\n\t\t\trole: \"blind\",\n\t\t\tunit: \"%\",\n\t\t},\n\t\tnative: {\n\t\t\tpath: getCoapAccessoryPropertyPathPrefix(deviceType) + \"position\",\n\t\t},\n\t}),\n\t// Blind position: 0% is open, 100% is closed\n\tstopBlinds: (rootId, rootType, deviceType) => {\n\t\tconst isGroup = rootType !== \"device\";\n\t\treturn {\n\t\t\t_id: isGroup\n\t\t\t\t? `${rootId}.stopBlinds`\n\t\t\t\t: `${rootId}.${accessoryTypeToString(deviceType!)}.stop`,\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: isGroup ? \"Stop blinds\" : \"Stop\",\n\t\t\t\tdesc: isGroup\n\t\t\t\t\t? \"Stops all moving blinds in this group.\"\n\t\t\t\t\t: \"Stops the motion of this blind.\",\n\t\t\t\tread: false,\n\t\t\t\twrite: true,\n\t\t\t\ttype: \"boolean\",\n\t\t\t\trole: \"blind\",\n\t\t\t},\n\t\t\tnative: {\n\t\t\t\t// This is only a dummy path. The state changed handler in main.ts requires it to exist\n\t\t\t\tpath:\n\t\t\t\t\tgetCoapAccessoryPropertyPathPrefix(deviceType) +\n\t\t\t\t\t`stop${isGroup ? \"Blinds\" : \"\"}`,\n\t\t\t},\n\t\t};\n\t},\n\n\t// STARKVIND Air Purifier\n\tairQuality: (rootId, rootType, deviceType) => ({\n\t\t_id:\n\t\t\trootType === \"device\"\n\t\t\t\t? `${rootId}.${accessoryTypeToString(deviceType!)}.airQuality`\n\t\t\t\t: `${rootId}.airQuality`,\n\t\ttype: \"state\",\n\t\tcommon: {\n\t\t\tname: \"Air quality\",\n\t\t\tdesc:\n\t\t\t\t(rootType === \"device\"\n\t\t\t\t\t? \"Air quality measured by this air purifier.\"\n\t\t\t\t\t: \"Air quality measured by this group's air purifiers.\") +\n\t\t\t\t\" 0..35 = good, 36..85 = OK, >= 86 == not good.\",\n\t\t\tread: true,\n\t\t\twrite: false,\n\t\t\ttype: \"number\",\n\t\t\tmin: 0,\n\t\t\tmax: 100,\n\t\t\trole: \"value\",\n\t\t},\n\t\tnative: {\n\t\t\tpath: getCoapAccessoryPropertyPathPrefix(deviceType) + \"airQuality\",\n\t\t},\n\t}),\n\n\tfanMode: (rootId, rootType, deviceType) => ({\n\t\t_id:\n\t\t\trootType === \"device\"\n\t\t\t\t? `${rootId}.${accessoryTypeToString(deviceType!)}.fanMode`\n\t\t\t\t: `${rootId}.fanMode`,\n\t\ttype: \"state\",\n\t\tcommon: {\n\t\t\tname: \"Fan mode\",\n\t\t\tread: true,\n\t\t\twrite: true,\n\t\t\ttype: \"number\",\n\t\t\tmin: 0,\n\t\t\tmax: 50,\n\t\t\trole: \"level.mode.fan\",\n\t\t\tstates: {\n\t\t\t\t0: \"Off\",\n\t\t\t\t1: \"Auto\",\n\t\t\t\t10: \"Level 1\",\n\t\t\t\t20: \"Level 2\",\n\t\t\t\t30: \"Level 3\",\n\t\t\t\t40: \"Level 4\",\n\t\t\t\t50: \"Level 5\",\n\t\t\t},\n\t\t},\n\t\tnative: {\n\t\t\tpath: getCoapAccessoryPropertyPathPrefix(deviceType) + \"fanMode\",\n\t\t},\n\t}),\n\n\tfanSpeed: (rootId, rootType, deviceType) => ({\n\t\t_id:\n\t\t\trootType === \"device\"\n\t\t\t\t? `${rootId}.${accessoryTypeToString(deviceType!)}.fanSpeed`\n\t\t\t\t: `${rootId}.fanSpeed`,\n\t\ttype: \"state\",\n\t\tcommon: {\n\t\t\tname: \"Fan speed\",\n\t\t\tread: true,\n\t\t\twrite: true,\n\t\t\ttype: \"number\",\n\t\t\tmin: 0,\n\t\t\tmax: 50,\n\t\t\trole: \"level\",\n\t\t\tstates: {\n\t\t\t\t0: \"Off\",\n\t\t\t\t10: \"min\",\n\t\t\t\t15: \"15\",\n\t\t\t\t20: \"20\",\n\t\t\t\t25: \"25\",\n\t\t\t\t30: \"30\",\n\t\t\t\t35: \"35\",\n\t\t\t\t40: \"40\",\n\t\t\t\t45: \"45\",\n\t\t\t\t50: \"max\",\n\t\t\t},\n\t\t},\n\t\tnative: {\n\t\t\tpath: getCoapAccessoryPropertyPathPrefix(deviceType) + \"fanSpeed\",\n\t\t},\n\t}),\n\n\tstatusLEDs: (rootId, rootType, deviceType) => ({\n\t\t_id:\n\t\t\trootType === \"device\"\n\t\t\t\t? `${rootId}.${accessoryTypeToString(deviceType!)}.statusLEDs`\n\t\t\t\t: `${rootId}.statusLEDs`,\n\t\ttype: \"state\",\n\t\tcommon: {\n\t\t\tname: \"Status LEDs\",\n\t\t\tread: true,\n\t\t\twrite: true,\n\t\t\ttype: \"boolean\",\n\t\t\trole: \"switch\",\n\t\t},\n\t\tnative: {\n\t\t\tpath: getCoapAccessoryPropertyPathPrefix(deviceType) + \"statusLEDs\",\n\t\t},\n\t}),\n\n\tcontrolsLocked: (rootId, rootType, deviceType) => ({\n\t\t_id:\n\t\t\trootType === \"device\"\n\t\t\t\t? `${rootId}.${accessoryTypeToString(\n\t\t\t\t\t\tdeviceType!,\n\t\t\t\t  )}.controlsLocked`\n\t\t\t\t: `${rootId}.controlsLocked`,\n\t\ttype: \"state\",\n\t\tcommon: {\n\t\t\tname: \"Controls locked\",\n\t\t\tdesc:\n\t\t\t\trootType === \"device\"\n\t\t\t\t\t? \"Enable/disable the controls of this air purifier.\"\n\t\t\t\t\t: \"Enable/disable the controls of this group's air purifiers.\",\n\t\t\tread: true,\n\t\t\twrite: true,\n\t\t\ttype: \"boolean\",\n\t\t\trole: \"switch\",\n\t\t},\n\t\tnative: {\n\t\t\tpath:\n\t\t\t\tgetCoapAccessoryPropertyPathPrefix(deviceType) +\n\t\t\t\t\"controlsLocked\",\n\t\t},\n\t}),\n\n\tfilterLifetime: (rootId, rootType, deviceType) => ({\n\t\t_id:\n\t\t\trootType === \"device\"\n\t\t\t\t? `${rootId}.${accessoryTypeToString(\n\t\t\t\t\t\tdeviceType!,\n\t\t\t\t  )}.filterLifetime`\n\t\t\t\t: `${rootId}.filterLifetime`,\n\t\ttype: \"state\",\n\t\tcommon: {\n\t\t\tname: \"Filter: Total lifetime\",\n\t\t\tread: true,\n\t\t\twrite: false,\n\t\t\ttype: \"number\",\n\t\t\trole: \"value\",\n\t\t},\n\t\tnative: {\n\t\t\tpath:\n\t\t\t\tgetCoapAccessoryPropertyPathPrefix(deviceType) +\n\t\t\t\t\"totalFilterLifetime\",\n\t\t},\n\t}),\n\n\tfilterRuntime: (rootId, rootType, deviceType) => ({\n\t\t_id:\n\t\t\trootType === \"device\"\n\t\t\t\t? `${rootId}.${accessoryTypeToString(\n\t\t\t\t\t\tdeviceType!,\n\t\t\t\t  )}.filterRuntime`\n\t\t\t\t: `${rootId}.filterRuntime`,\n\t\ttype: \"state\",\n\t\tcommon: {\n\t\t\tname: \"Filter: Runtime\",\n\t\t\tread: true,\n\t\t\twrite: false,\n\t\t\ttype: \"number\",\n\t\t\trole: \"value\",\n\t\t},\n\t\tnative: {\n\t\t\tpath:\n\t\t\t\tgetCoapAccessoryPropertyPathPrefix(deviceType) +\n\t\t\t\t\"filterRuntime\",\n\t\t},\n\t}),\n\n\tfilterRemainingLifetime: (rootId, rootType, deviceType) => ({\n\t\t_id:\n\t\t\trootType === \"device\"\n\t\t\t\t? `${rootId}.${accessoryTypeToString(\n\t\t\t\t\t\tdeviceType!,\n\t\t\t\t  )}.filterRemainingLifetime`\n\t\t\t\t: `${rootId}.filterRemainingLifetime`,\n\t\ttype: \"state\",\n\t\tcommon: {\n\t\t\tname: \"Filter: Remaining lifetime\",\n\t\t\tread: true,\n\t\t\twrite: false,\n\t\t\ttype: \"number\",\n\t\t\trole: \"value\",\n\t\t},\n\t\tnative: {\n\t\t\tpath:\n\t\t\t\tgetCoapAccessoryPropertyPathPrefix(deviceType) +\n\t\t\t\t\"filterRemainingLifetime\",\n\t\t},\n\t}),\n\n\tfilterStatus: (rootId, rootType, deviceType) => ({\n\t\t_id:\n\t\t\trootType === \"device\"\n\t\t\t\t? `${rootId}.${accessoryTypeToString(deviceType!)}.filterStatus`\n\t\t\t\t: `${rootId}.filterStatus`,\n\t\ttype: \"state\",\n\t\tcommon: {\n\t\t\tname: \"Filter: Status\",\n\t\t\tread: true,\n\t\t\twrite: false,\n\t\t\ttype: \"number\",\n\t\t\trole: \"value\",\n\t\t},\n\t\tnative: {\n\t\t\tpath:\n\t\t\t\tgetCoapAccessoryPropertyPathPrefix(deviceType) + \"filterStatus\",\n\t\t},\n\t}),\n};\n"],
  "mappings": "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",
  "names": []
}
