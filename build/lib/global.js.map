{
  "version": 3,
  "sources": ["../../src/lib/global.ts"],
  "sourcesContent": ["import { filter as objFilter } from \"alcalzone-shared/objects\";\n\n// ==================================\n\n// Disabled for now since there's no more html support in ioBroker\n// const colors = {\n// \tred: \"#db3340\",\n// \tyellow: \"#ffa200\",\n// \tgreen: \"#5bb12f\",\n// \tblue: \"#0087cb\",\n// };\n\n// const replacements: {\n// \t[id: string]: [RegExp, string | ((substring: string, ...args: any[]) => string)];\n// } = {\n// \tbold: [/\\*{2}(.*?)\\*{2}/g, \"<b>$1</b>\"],\n// \titalic: [/#{2}(.*?)#{2}/g, \"<i>$1</i>\"],\n// \tunderline: [/_{2}(.*?)_{2}/g, \"<u>$1</u>\"],\n// \tstrikethrough: [/\\~{2}(.*?)\\~{2}/g, \"<s>$1</s>\"],\n// \tcolor: [/\\{{2}(\\w+)\\|(.*?)\\}{2}/, (str, p1, p2) => {\n// \t\tconst color = colors[p1];\n// \t\tif (!color) return str;\n\n// \t\treturn `<span style=\"color: ${color}\">${p2}</span>`;\n// \t}],\n// \tfullcolor: [/^\\{{2}(\\w+)\\}{2}(.*?)$/, (str, p1, p2) => {\n// \t\tconst color = colors[p1];\n// \t\tif (!color) return str;\n\n// \t\treturn `<span style=\"color: ${color}\">${p2}</span>`;\n// \t}],\n// };\n\nexport interface ExtendedAdapter extends ioBroker.Adapter {\n\t__isExtended: boolean;\n\n\tcreateOwnStateAsync(\n\t\tid: string,\n\t\tinitialValue: any,\n\t\tack?: boolean,\n\t\tcommonType?: ioBroker.CommonType,\n\t): Promise<void>;\n\tcreateOwnStateExAsync(\n\t\tid: string,\n\t\tobj: ioBroker.Object,\n\t\tinitialValue: any,\n\t\tack?: boolean,\n\t): Promise<void>;\n}\n\nexport class Global {\n\tprivate static _adapter: ExtendedAdapter;\n\tpublic static get adapter(): ExtendedAdapter {\n\t\treturn Global._adapter;\n\t}\n\tpublic static set adapter(adapter: ExtendedAdapter) {\n\t\tGlobal._adapter = adapter;\n\t}\n\n\tpublic static extend(adapter: ioBroker.Adapter): ExtendedAdapter {\n\t\t// Eine Handvoll Funktionen promisifizieren\n\n\t\tconst ret = adapter as ExtendedAdapter;\n\t\tret.createOwnStateAsync = async (\n\t\t\tid: string,\n\t\t\tinitialValue: any,\n\t\t\tack: boolean = true,\n\t\t\tcommonType: ioBroker.CommonType = \"mixed\",\n\t\t) => {\n\t\t\tawait ret.setObjectAsync(id, {\n\t\t\t\ttype: \"state\",\n\t\t\t\tcommon: {\n\t\t\t\t\tname: id,\n\t\t\t\t\trole: \"value\",\n\t\t\t\t\ttype: commonType,\n\t\t\t\t\tread: true,\n\t\t\t\t\twrite: true,\n\t\t\t\t},\n\t\t\t\tnative: {},\n\t\t\t});\n\t\t\tif (initialValue != undefined)\n\t\t\t\tawait ret.setStateAsync(id, initialValue, ack);\n\t\t};\n\t\tret.createOwnStateExAsync = async (\n\t\t\tid: string,\n\t\t\tobj: ioBroker.Object,\n\t\t\tinitialValue: any,\n\t\t\tack = true,\n\t\t) => {\n\t\t\tawait ret.setObjectAsync(id, obj);\n\t\t\tif (initialValue != undefined)\n\t\t\t\tawait ret.setStateAsync(id, initialValue, ack);\n\t\t};\n\n\t\treturn ret;\n\t}\n\n\t/*\n\t\tFormatierungen:\n\t\t**fett**, ##kursiv##, __unterstrichen__, ~~durchgestrichen~~\n\t\tschwarz{{farbe|bunt}}schwarz, {{farbe}}bunt\n\t*/\n\tpublic static log(\n\t\tmessage: string,\n\t\tlevel: ioBroker.LogLevel = \"info\",\n\t): void {\n\t\tif (!Global.adapter) return;\n\n\t\t// if (message) {\n\t\t// \t// Farben und Formatierungen\n\t\t// \tfor (const [/*key*/, [regex, repl]] of entries(replacements)) {\n\t\t// \t\tif (typeof repl === \"string\") {\n\t\t// \t\t\tmessage = message.replace(regex, repl);\n\t\t// \t\t} else { // a bit verbose, but TS doesn't get the overload thingy here\n\t\t// \t\t\tmessage = message.replace(regex, repl);\n\t\t// \t\t}\n\t\t// \t}\n\t\t// }\n\n\t\tif (level === \"silly\" && !(level in Global._adapter.log))\n\t\t\tlevel = \"debug\";\n\t\tGlobal._adapter.log[level](message);\n\t}\n\n\t/**\n\t * Kurzschreibweise f\u00FCr die Ermittlung eines Objekts\n\t * @param id\n\t */\n\tpublic static $(id: string): Promise<ioBroker.Object | null | undefined> {\n\t\treturn Global._adapter.getForeignObjectAsync(id);\n\t}\n\n\t/**\n\t * Kurzschreibweise f\u00FCr die Ermittlung mehrerer Objekte\n\t * @param id\n\t */\n\tpublic static async $$(\n\t\tpattern: string,\n\t\ttype: ioBroker.ObjectType,\n\t\trole?: string,\n\t): Promise<Record<string, ioBroker.Object>> {\n\t\tconst objects = await Global._adapter.getForeignObjectsAsync(\n\t\t\tpattern,\n\t\t\ttype,\n\t\t);\n\t\tif (role) {\n\t\t\treturn objFilter(objects, (o) => (o.common as any).role === role);\n\t\t} else {\n\t\t\treturn objects;\n\t\t}\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAoC;AAkD7B,aAAa;AAAA,aAED,UAA2B;AAC5C,WAAO,OAAO;AAAA;AAAA,aAEG,QAAQ,SAA0B;AACnD,WAAO,WAAW;AAAA;AAAA,SAGL,OAAO,SAA4C;AAGhE,UAAM,MAAM;AACZ,QAAI,sBAAsB,OACzB,IACA,cACA,MAAe,MACf,aAAkC,YAC9B;AACJ,YAAM,IAAI,eAAe,IAAI;AAAA,QAC5B,MAAM;AAAA,QACN,QAAQ;AAAA,UACP,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,UACN,OAAO;AAAA;AAAA,QAER,QAAQ;AAAA;AAET,UAAI,gBAAgB;AACnB,cAAM,IAAI,cAAc,IAAI,cAAc;AAAA;AAE5C,QAAI,wBAAwB,OAC3B,IACA,KACA,cACA,MAAM,SACF;AACJ,YAAM,IAAI,eAAe,IAAI;AAC7B,UAAI,gBAAgB;AACnB,cAAM,IAAI,cAAc,IAAI,cAAc;AAAA;AAG5C,WAAO;AAAA;AAAA,SAQM,IACb,SACA,QAA2B,QACpB;AACP,QAAI,CAAC,OAAO;AAAS;AAarB,QAAI,UAAU,WAAW,CAAE,UAAS,OAAO,SAAS;AACnD,cAAQ;AACT,WAAO,SAAS,IAAI,OAAO;AAAA;AAAA,SAOd,EAAE,IAAyD;AACxE,WAAO,OAAO,SAAS,sBAAsB;AAAA;AAAA,eAO1B,GACnB,SACA,MACA,MAC2C;AAC3C,UAAM,UAAU,MAAM,OAAO,SAAS,uBACrC,SACA;AAED,QAAI,MAAM;AACT,aAAO,2BAAU,SAAS,CAAC,MAAO,EAAE,OAAe,SAAS;AAAA,WACtD;AACN,aAAO;AAAA;AAAA;AAAA;",
  "names": []
}
